<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1129-玩转Vim 从放弃到爱不释手</title>
      <link href="/2019/11/05/1129-vim/"/>
      <url>/2019/11/05/1129-vim/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/1129" target="_blank" rel="noopener">https://www.imooc.com/learn/1129</a></p><p>简介：Vim作为一个强大的编辑器，是很多巨佬的不二之选，但因为其较高的入门学习门槛劝退了很多人。中文的系统教程少之又少，讲vim插件使用的更是屈指可数，本课程从vim最基础的操作和概念开始讲起，带领大家学会使用和配置 vim，安装强大的 vim 插件，真正掌握编辑器之神 vim 的使用。</p></blockquote><p>@[TOC]</p><h2 id="第1章-玩转vim-从放弃到爱不释手"><a href="#第1章-玩转vim-从放弃到爱不释手" class="headerlink" title="第1章 玩转vim 从放弃到爱不释手"></a>第1章 玩转vim 从放弃到爱不释手</h2><blockquote><p>课程导学</p></blockquote><h3 id="1-1-玩转vim-从放弃到爱不释手-课程导学-09-43"><a href="#1-1-玩转vim-从放弃到爱不释手-课程导学-09-43" class="headerlink" title="1-1 玩转vim 从放弃到爱不释手-课程导学 (09:43)"></a>1-1 玩转vim 从放弃到爱不释手-课程导学 (09:43)</h3><p>什么是Vim？</p><blockquote><p>Linux下两大编辑神器之一：Vim</p></blockquote><ul><li>Linux/Unix下使用最多的编辑器</li><li>Vi的改进版</li><li>可能是最难上手的编辑器之一</li></ul><p>为什么要学习Vim？</p><blockquote><p>都21世纪了，为什么还要学习Vim？</p></blockquote><ul><li>只要你用服务器，Vim就是一个必备技能</li><li>后端和运维工程师必须掌握的编辑器，不然服务器上操作很尴尬</li><li>可以纯键盘⌨️编辑，提升编辑效率</li></ul><p>痛点</p><blockquote><p>Vim难上手，学习曲线陡</p></blockquote><ul><li>Vim视频学习资料很少，网上很多博客讲解零散、不够直观</li><li>缺少系统的教程。Vim命令众多，难以学习和记忆</li><li>Vim学习曲线比较陡，需要较长时间才能上手，劝退很多初学者</li></ul><p>课程目的</p><blockquote><p>帮你驯服Vim</p></blockquote><ul><li>了解和掌握Vim中的基本概念</li><li>熟悉Vim基本使用方法，能够做到日常编辑（纯键盘编辑）</li><li>知道如何自定义Vim，安装插件无限扩充Vim的功能</li></ul><p>课程内容</p><blockquote><p>如何学习Vim？Vim经常被诟病难易上手和使用</p></blockquote><ul><li>Vim的概念和基本操作，比如移动和增删改查</li><li>如何配置Vim，编写自己的vimrc文件</li><li>如何安装和使用插件，无限扩充Vim的功能</li></ul><p>受众</p><blockquote><p>哪些人可以从本门课程受益呢？</p></blockquote><ul><li>运维工程师、后端工程师等</li><li>Linux用户</li><li>对Vim感兴趣，想要提升开发效率的开发者,甚至普通用户</li></ul><p>预备知识</p><blockquote><p>不要求掌握Vim的基础知识，但最好使用Linux/Unix系统</p></blockquote><ul><li>熟悉基本的命令行操作（一般Vim多在Linux服务器上使用）</li><li>知道如何安装Vim</li><li>有其他编辑器使用经验。几乎所有流行IDE和编辑器都有Vim扩展</li></ul><p>课程特色</p><blockquote><p>学习Vim非一日之功，得靠肌肉记忆</p></blockquote><ul><li>由浅入深，循序渐进。从基本的概念和操作讲起</li><li>授人以🐟，同时授人以渔。学会了插件自己扩充Vim功能</li><li>大量实践技巧（所有演示均使用按键回显工具，让你看得更明白）</li></ul><h2 id="第2章-初识-Vim，想说爱你不容易"><a href="#第2章-初识-Vim，想说爱你不容易" class="headerlink" title="第2章 初识 Vim，想说爱你不容易"></a>第2章 初识 Vim，想说爱你不容易</h2><blockquote><p>从基础的 Vim 操作讲起，学习 Vim 操作和涉及到的 Vim 概念。</p></blockquote><h3 id="2-1-初识-Vim，想说爱你不容易-11-50"><a href="#2-1-初识-Vim，想说爱你不容易-11-50" class="headerlink" title="2-1 初识 Vim，想说爱你不容易 (11:50)"></a>2-1 初识 Vim，想说爱你不容易 (11:50)</h3><p>下载与安装</p><blockquote><p>作为开发者的你，安装Vim应该很简单</p></blockquote><ul><li>Linux/Unix(Mac)自带Vim，直接终端里输入<code>vim</code>即可进入</li><li>Windows用户可以下载安装Gvim等体验</li><li>建议Windows用户可以尝试使用虚拟机来体验Linux下的Vim</li></ul><p>初识Vim</p><blockquote><p>据说StackOverflow帮助过上百万开发者退出过Vim！</p></blockquote><ul><li><p>输入<code>vim</code>命令进入Vim</p><pre><code>~                              VIM - Vi IMproved                                ~                                                                               ~                               version 8.0.1283                                ~                           by Bram Moolenaar et al.                            ~                 Vim is open source and freely distributable                   ~                                                                               ~                        Become a registered Vim user!                          ~                type  :help register&lt;Enter&gt;   for information                  ~                                                                          ~                type  :q&lt;Enter&gt;               to exit~                type  :help&lt;Enter&gt;  or  &lt;F1&gt;  for on-line help~                type  :help version8&lt;Enter&gt;   for version info</code></pre></li><li><p>进去之后似乎没法输入东西，起始默认进去是普通(normal)模式</p></li><li><p>使用<code>:q</code>可以退出Vim</p></li></ul><p>开始编辑</p><blockquote><p>进入编辑模式就可以像其他编辑器一样编辑了</p></blockquote><ul><li><p>使用<code>i</code>进入编辑模式，开始输入文字</p></li><li><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td><code>i</code></td><td>insert before character</td></tr><tr><td><code>a</code></td><td>append after character</td></tr><tr><td><code>o</code></td><td>open a line below</td></tr><tr><td><code>I</code></td><td>insert before line</td></tr><tr><td><code>A</code></td><td>append after line</td></tr><tr><td><code>O</code></td><td>open a line above</td></tr></tbody></table></li><li><p>使用<code>Esc</code>又可以回到普通(normal)模式。使用<code>:wq</code>保存退出</p><p>insert -&gt; normal：<code>Esc</code></p></li></ul><p>课后练习</p><blockquote><p>用Vim靠的是肌肉记忆，赶紧自己操作练习一下吧</p></blockquote><ul><li>通过搜索引擎学习如何安装，并在你的操作系统中安装好Vim</li><li>进入Vim，使用<code>i</code>/<code>a</code>/<code>o</code>进入编辑(insert)模式输入文本</li><li>退回到默认的普通(normal)模式，保存并退出Vim</li></ul><h3 id="2-2-Vim，为什么你有这么多模式-09-15"><a href="#2-2-Vim，为什么你有这么多模式-09-15" class="headerlink" title="2-2 Vim，为什么你有这么多模式 (09:15)"></a>2-2 Vim，为什么你有这么多模式 (09:15)</h3><p>“怪异的Vim模式”</p><blockquote><p>Vim和其他很多编辑器的区别在于多种模式</p></blockquote><ul><li><p>进入Vim默认是普通(normal)模式？为什么不是编辑模式呢？</p><p>答：在日常开发中更多的是浏览代码，而不是编辑代码</p></li><li><p>使用<code>i</code>(insert)/<code>a</code>(append)等进入编辑模式</p></li><li><p>还有<code>:cmd</code>命令模式和<code>v</code>(visual)可视化模式</p></li></ul><ol><li>为什么进入Vim不能插入—普通(Normal)模式</li></ol><blockquote><p>奇怪的是，为什么Vim进入之后不能像其他编辑器一样直接插入？</p></blockquote><ul><li>进入Vim默认是普通(normal)模式。使用<code>Esc</code>从插入模式回到普通模式</li><li>普通模式下可以进行各种命令操作和移动</li><li>大部分情况下，你是在浏览而不是编辑。所以Vim默认是普通(normal)模式</li></ul><ol start="2"><li>插入(Insert)模式</li></ol><blockquote><p>插入模式下Vim可以直接编辑，和其他编辑器一样</p></blockquote><ul><li>使用<code>i</code>(insert)/<code>a</code>(append)/<code>o</code>(open a line below)进入插入模式</li><li>使用<code>Esc</code>退出插入模式到普通(normal)模式</li><li>你来试试<code>I</code>/<code>A</code>/<code>O</code>如何进入插入模式的？</li></ul><ol start="3"><li>命令(Command)模式</li></ol><blockquote><p>普通(Normal)模式下输入<code>:</code>之后执行命令，比如保存退出<code>:wq</code>，一气呵成</p></blockquote><ul><li>顾名思义，执行Vim命令。比如保存<code>:w</code>、退出<code>:q</code></li><li>比如分屏：<code>:vs</code>(vertical split)、<code>:sp</code>(split)</li><li>比如使用<code>:% s/java/python/g</code>全局替换，将<code>java</code>替换为<code>python</code></li></ul><ol start="4"><li>可视化(Visual)模式</li></ol><blockquote><p>可视化(Visual)模式一般用来块状选择文本</p></blockquote><ul><li>普通模式下，使用<code>v</code>进入字符选择</li><li>使用<code>V</code>选择行</li><li>使用<code>Ctrl+v</code>进入方块♦️选择</li></ul><p>课后练习</p><blockquote><p>理解和使用Vim常用的4种模式</p></blockquote><ul><li>找一个文件编辑，在插入模式和普通模式之间切换</li><li>使用命令模式替换单词</li><li>尝试使用可视化(Visual)模式，想想它的使用场景是？</li></ul><h3 id="2-3-Vim-插入模式小技巧-08-08"><a href="#2-3-Vim-插入模式小技巧-08-08" class="headerlink" title="2-3 Vim 插入模式小技巧 (08:08)"></a>2-3 Vim 插入模式小技巧 (08:08)</h3><p>如何快速纠错？</p><blockquote><p>代码就像人生，总是经常出错，需要我们快速修正</p></blockquote><ul><li><p>进入Vim之后，首先使用<code>i</code>/<code>a</code>/<code>o</code>进入插入模式</p></li><li><p>尝试抛弃退格键，使用<code>Ctrl</code>快捷键来完成编辑删除工作</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl+h</code></td><td>删除上一个字符</td></tr><tr><td><code>Ctrl+w</code></td><td>删除上一个单词</td></tr><tr><td><code>Ctrl+u</code></td><td>删除当前行</td></tr></tbody></table></li><li><p>以上几个快捷键可以用在很多地方，比如<strong><em>终端</em></strong></p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td><code>Ctrl+a</code></td><td>快速移动到开头</td></tr><tr><td><code>Ctrl+e</code></td><td>快速移动到结尾</td></tr><tr><td><code>Ctrl+b</code></td><td>前移动</td></tr><tr><td><code>Ctrl+f</code></td><td>后移动</td></tr></tbody></table></li></ul><p>快速切换普通(Normal)模式和编辑(Insert)模式</p><blockquote><p>很多键盘的键位设置，<code>Esc</code>按起来不方便，不方便切换到普通模式</p></blockquote><ul><li>使用<code>Ctrl+c</code>代替<code>Esc</code>（但是可能会中断某些插件）、<code>Ctrl+[</code></li><li><strong><code>gi</code>快速跳转到最后一次编辑的地方，并进入插入模式</strong></li><li>在配置章节，我们会讲解如何映射方便的快捷键来代替<code>Esc</code></li></ul><p>让键盘适应工具</p><blockquote><p>键盘的选择会影响你的编辑速度</p></blockquote><ul><li>选择<code>Esc</code>和<code>Ctrl</code>比较容易触碰到的键盘</li><li>使用Vim，你可以使用HHKB或者Poker2这种迷你键盘</li><li>使用软件修改键位，比如<code>CapsLock</code>改成频繁使用到的<code>Ctrl</code></li></ul><ul><li><p>码农神器之HHKB—专为Linux下Vim/Emacs设计</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gg8zp9kyj31jw0kojwp.jpg" alt="码农神器之HHKB" style="zoom:50%;" /></li><li><p>发烧之选—Poker2</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gg90lb5nj31gi0i0dis.jpg" alt="发烧之选---Poker2" style="zoom:50%;" /></li></ul><h3 id="2-4-Vim-快速移动大法-15-11"><a href="#2-4-Vim-快速移动大法-15-11" class="headerlink" title="2-4 Vim 快速移动大法 (15:11)"></a>2-4 Vim 快速移动大法 (15:11)</h3><p>众所周知，vim normal模式使用了反人类的hjkl来移动</p><ul><li>编辑器作者在编写vim的时候，键盘还没流行上下左右按键</li><li>左（<code>h</code>），下（<code>j</code>），上（<code>k</code>），右（<code>l</code>）。移动也不会让手指脱离主键盘区</li><li>逼着自己使用hjkl一段时间之后，便会体会到它非常有效率</li></ul><p>在单词之间「飞舞」</p><blockquote><p>在单词之间移动是我们浏览操作中最常使用的命令</p></blockquote><ul><li><code>w</code>/<code>W</code>移动到下一个word/WORD开头。<code>e</code>/<code>E</code>移动到下一个word/WORD结尾</li><li><code>b</code>/<code>B</code>回到上一个word/WORD开头，可以理解为backword</li><li>word指的是以非空白符分割的单词，WORD指的是以空白符分割的单词</li></ul><p><code>synyax on</code>：打开高亮显示</p><p>行间搜索移动</p><blockquote><p>同一行快速移动的方式其实是：搜索一个字符并且移动到该字符</p></blockquote><ul><li>使用<code>f{char}</code>可以移动到char字符上，<code>t{char}</code>移动到char的前一个字符</li><li>如果第一次没搜到，可以用分号<code>;</code>/逗号<code>,</code>继续搜索该行的下一个/上一个</li><li>大写的<code>F</code>表示反过来搜索前面的字符</li></ul><p>如何快速移动到一行的行首或者行尾呢？</p><ul><li><code>0</code>移动到行首第一个字符，<code>^</code>移动到行首第一个非空白字符</li><li><code>$</code>移动到行尾，<code>_g</code>移动到行尾非空白字符</li><li>记住常用的<code>0</code>和<code>$</code>就可以满足日常需求了。</li></ul><p>Vim垂直移动</p><blockquote><p>在句子（sentence）和段落（paragraph）间移动。（不常用）</p></blockquote><ul><li>使用小括号<code>()</code>在句子间移动，可以使用<code>:help (</code>来查看帮助文档</li><li>使用大括号<code>{}</code>在段落间移动</li><li>插件章节会讲到如何使用easy-motion插件移动，这些命令就都不用记忆了</li></ul><p>Vim页面移动</p><ul><li><code>gg</code>/<code>G</code>移动到文件开头和结尾，可以使用<code>ctrl+o</code>快速返回</li><li><code>H</code>/<code>M</code>/<code>L</code>跳转到屏幕的开头（Head）、中间（Middle）、结尾（Lower）</li><li><code>ctrl+u</code>、<code>ctrl+f</code>上下翻页（upward/forward）。<code>zz</code>把光标当前行置为屏幕中间</li></ul><h3 id="2-5-Vim快速增删改查-13-29"><a href="#2-5-Vim快速增删改查-13-29" class="headerlink" title="2-5 Vim快速增删改查 (13:29)"></a>2-5 Vim快速增删改查 (13:29)</h3><p>Vim增加字符</p><ul><li>进入插入模式编辑文本</li><li><code>a</code>/<code>i</code>/<code>o</code>、<code>A</code>/<code>I</code>/<code>O</code></li></ul><p>Vim快速删除</p><ul><li>Vim在normal模式下使用<code>x</code>快速删除一个字符</li><li>使用<code>d</code>（delete）配合文本对象快速删除一个单词<code>daw</code>（d around word）</li><li><code>d</code>和<code>x</code>都可以搭配数字来执行多次</li></ul><p>Vim快速修改</p><ul><li><p><code>r{char}</code>（replace）、<code>c</code>（change）、<code>s</code>（substitute）</p></li><li><p>normal模式下使用<code>r{char}</code>可以替换一个字符char。<code>s</code>替换并进入插入模式</p><p><code>R</code>进入插入模式，将光标所在的字符直接替换为输入的字符。<code>S</code>删除整行，进入插入模式</p></li><li><p>使用<code>c</code>配合文本对象可以快速进行修改。例如：<code>ciw</code>、<code>caw</code>、<code>ct&quot;</code></p><p><code>C</code>删除整行，进入插入模式（不包含行首的非空白字符）</p></li></ul><p>Vim查询</p><ul><li>使用<code>/</code>或者<code>?</code>进行前向或者反向搜索</li><li>使用<code>n</code>/<code>N</code>跳转到下一个或者上一个匹配</li><li>使用<code>*</code>或者<code>#</code>进行当前光标所在单词的前向或者后向匹配</li></ul><h3 id="2-6-Vim-如何搜索替换-07-15"><a href="#2-6-Vim-如何搜索替换-07-15" class="headerlink" title="2-6 Vim 如何搜索替换 (07:15)"></a>2-6 Vim 如何搜索替换 (07:15)</h3><p>Vim替换命令：</p><blockquote><p>substitute命令允许查找并且替换文本，并且支持正则表达式</p></blockquote><ul><li><code>:[range] s[ubstitute]/{pattern}/{string}/[flags]</code></li><li><code>range</code>表示范围。 比如：<code>10,20</code>表示10-20行，<code>%</code>表示全部</li><li><code>pattern</code>是要替换的模式，<code>string</code>是替换后的文本，<code>flags</code>是替换标志位</li></ul><p>替换标志位</p><ul><li><code>g</code>(flobal)表示全局范围内执行</li><li><code>c</code>(confirm)表示确认，可以确认或者拒绝修改</li><li><code>n</code>(number)报告匹配到的次数而不替换，可以用来查询匹配次数</li></ul><p>例：</p><pre><code class="shell"># 在全局范围内将self替换为this:% s/self/this/g# 在1-6行将self替换为this:1,6 s/self/this/g# 统计1-6行匹配到self的次数:1,6 s/self//n# 利用正则，将quack替换为jiao，而不替换do_quack:% s/\&lt;quack\&gt;/jiao/g</code></pre><p><code>u</code>：撤销操作</p><p><code>Ctrl+r</code>：反向撤销</p><p>课后练习：</p><ul><li>如何批量替换多个文件中的匹配呢？</li><li>延伸：使用插件来批量搜索替换多个文件中的匹配</li></ul><h3 id="2-7-Vim-多文件操作-15-01"><a href="#2-7-Vim-多文件操作-15-01" class="headerlink" title="2-7 Vim 多文件操作 (15:01)"></a>2-7 Vim 多文件操作 (15:01)</h3><p>Buffer Window Tab：</p><ul><li><p>Buffer是指打开的一个文件的内存缓冲区</p></li><li><p>Window是Buffer可视化的分割区域</p></li><li><p>Tab可以组织Window为一个工作区</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gg91qg8bj31dh0u0qag.jpg" alt="Buffer Window Tab" style="zoom:40%;" /></li></ul><p>Buffer（缓冲区）</p><ul><li>Vim打开一个文件后会加载文件内容到缓冲区</li><li>之后的修改都是针对内存中的缓冲区，并不会直接保存到文件</li><li>直到执行<code>:w</code>（write）的时候才会把修改的内容写入到文件里</li></ul><p>Buffer切换</p><ul><li>使用<code>:ls</code>会列举出当前缓冲区，然后使用<code>:b n</code>跳转到第n个缓冲区</li><li><code>bpre</code>、<code>bnext</code>、<code>bfirst</code>、<code>blast</code></li><li><code>:b buffer_name</code>、<code>:b filename</code>，<code>tab</code>会自动补全<code>buffer_name</code></li></ul><p><code>:e b.txt</code>：编辑(edit)b.txt</p><p>Window窗口：</p><ul><li>一个缓冲区可以分割成多个窗口，每个窗口也可以打开不同的缓冲区</li><li><code>&lt;Ctrl+w&gt;s</code>水平分割，<code>&lt;Ctrl+w&gt;v</code>垂直分割。或者<code>:sp</code>、<code>:vs</code></li><li>每个窗口可以继续被无限分割（屏幕是否足够大）</li></ul><p>分割窗口示例：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gg933wfnj30vi0lqwfr.jpg" alt="Window分割窗口示例" style="zoom:40%;" /><p>如何切换窗口：</p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>&lt;Ctrl+w&gt;w</code></td><td>在窗口间循环切换</td></tr><tr><td><code>&lt;Ctrl+w&gt;h</code></td><td>切换到左边的窗口</td></tr><tr><td><code>&lt;Ctrl+w&gt;j</code></td><td>切换到下边的窗口</td></tr><tr><td><code>&lt;Ctrl+w&gt;k</code></td><td>切换到上边的窗口</td></tr><tr><td><code>&lt;Ctrl+w&gt;l</code></td><td>切换到右边的窗口</td></tr></tbody></table><p><code>&lt;Ctrl+w&gt;L</code>：将当前窗口移动到右边</p><p><code>&lt;Ctrl+w&gt;H</code>：将当前窗口移动到左边</p><p>如何重排窗口？</p><blockquote><p>重排窗口可以改变窗口的大小<code>:h window-resize</code>查看文档</p></blockquote><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>&lt;Ctrl+w&gt;=</code></td><td>使所有窗口等宽、等高</td></tr><tr><td><code>&lt;Ctrl+w&gt;_</code></td><td>最大化活动窗口的高度</td></tr><tr><td>`&lt;Ctrl+w&gt;</td><td>`</td></tr><tr><td><code>[n] &lt;Ctrl+w&gt;_</code></td><td>把活动窗口的高度设为[n]行</td></tr><tr><td>`[n] &lt;Ctrl+w&gt;</td><td>`</td></tr></tbody></table><p>Tab（标签页）将窗口分组</p><blockquote><p>Tab是可以容纳一系列窗口的容器<code>:h tabpage</code></p></blockquote><ul><li>Vim的Tab和其他编辑器有所不同，可以将其想象为Linux的虚拟桌面</li><li>比如一个Tab全用来编辑Python文件，一个Tab全是HTML文件</li><li>相比窗口，Tab一般使用较少，Tab太多管理起来也比较麻烦</li></ul><p>Tab操作</p><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><code>:tabnew {filename}</code></td><td>在新标签中打开{filename}</td></tr><tr><td><code>:tabe[dit] {filename}</code></td><td>在新标签中打开{filename}</td></tr><tr><td><code>&lt;Ctrl+w&gt;T</code></td><td>把当前窗口移动到一个新标签页</td></tr><tr><td><code>:tabc[lose]</code></td><td>关闭当前标签页及其中的所有窗口</td></tr><tr><td><code>tabo[nly]</code></td><td>只保留活动标签页，关闭其他所有标签页</td></tr></tbody></table><p>Tab切换操作</p><table><thead><tr><th>Ex命令</th><th>普通模式命令</th><th>用途</th></tr></thead><tbody><tr><td><code>:tabn[ext] {N}</code></td><td><code>{N} gt</code></td><td>切换到标签为{N}的标签页</td></tr><tr><td><code>:tabn[ext]</code></td><td><code>gt</code></td><td>切换到下一个标签页</td></tr><tr><td><code>tabp[revious]</code></td><td><code>gT</code></td><td>切换到上一个标签页</td></tr></tbody></table><p><code>:vs c.txt</code>：垂直分割打开c.txt</p><p><code>:tabnew duck.py</code>：在新的标签页打开duck.py</p><p>课后练习</p><ul><li>尝试打开Vim一次操作多个文件</li><li>窗口分割可以非常方便的查看代码，比如查看整个调用链</li><li>延伸：插件篇会配合<code>ctrlp</code>插件和<code>nerdtree</code>快速操作多个文件</li></ul><h3 id="2-8-什么是-Vim-的-text-object-06-49"><a href="#2-8-什么是-Vim-的-text-object-06-49" class="headerlink" title="2-8 什么是 Vim 的 text object (06:49)"></a>2-8 什么是 Vim 的 text object (06:49)</h3><p>Text Object（文本对象）</p><ul><li>Vim里文本也有对象的概念，比如一个单词、一段句子、一个段落</li><li>很多其他编辑器经常只能操作单个字符来修改文本，比较低效</li><li>通过操作文本对象来修改要比只操作单个字符高效</li></ul><p>文本对象操作方式</p><blockquote><p>之前已经使用过文本对象了，比如<code>dw</code>删除一个单词</p></blockquote><ul><li><code>[number] &lt;command&gt; [text object]</code>。次数+命令+文本对象</li><li><code>number</code>表示次数，<code>command</code>表示命令：<code>d</code>(delete)、<code>c</code>(chage)、<code>y</code>(yank)</li><li><code>text object</code>是要操作的文本对象，比如单词<code>w</code>、句子<code>s</code>、段落<code>p</code></li></ul><p><code>iw</code>：表示inner word。<code>viw</code>命令首先<code>v</code>进入选择模式，<code>iw</code>将选中当前单词</p><p><code>aw</code>：表示around word。它不但会选中当前单词，还会包含单词之后的空格</p><p><code>ci&quot;</code>：删除<code>&quot;&quot;</code>中的内容，并进入插入模式。另外还有<code>()</code>、<code>{}</code>、<code>[]</code>等。</p><p>课后练习</p><blockquote><p>摆脱低效的字符操作，使用文本对象提升效率</p></blockquote><ul><li>如何删除一个单词？</li><li>在Vim中尝试使用文本对象快速增、删、改一个单词</li><li>延伸：有些插件扩展了文本对象。比如<code>vim-go</code>可以使用<code>f</code>表示一个函数</li></ul><h3 id="2-9-Vim复制粘贴与寄存器的使用-16-51"><a href="#2-9-Vim复制粘贴与寄存器的使用-16-51" class="headerlink" title="2-9 Vim复制粘贴与寄存器的使用 (16:51)"></a>2-9 Vim复制粘贴与寄存器的使用 (16:51)</h3><p>Normal模式复制粘贴</p><ul><li><p>normal模式下复制粘贴分别使用<code>y</code>(yank)和<code>p</code>(put)，剪贴<code>d</code>和<code>p</code></p></li><li><p>可以使用<code>v</code>(visual)命令选中所要复制的地方，然后使用<code>p</code>粘贴</p></li><li><p>配合文本对象。比如使用<code>viw</code>复制一个单词，<code>yy</code>复制一行</p><p>Vim里的<strong>剪贴</strong>(cut)<strong>复制</strong>(copy)<strong>粘贴</strong>(paste)分别是<strong>delete</strong>/<strong>yank</strong>/<strong>put</strong></p></li></ul><p>Insert模式下的复制粘贴</p><ul><li>和其他文本编辑器一样，使用<code>Ctrl+v</code>或者<code>cmd+v</code>粘贴，但是粘贴代码有个坑</li><li>很多人在<code>.vimrc</code>中设置了<code>autoindent</code>，粘贴Python代码缩进错乱</li><li>这个时候需要在粘贴前后使用<code>:set paste</code>和<code>:set nopaste</code>解决、使用系统剪贴板寄存器<code>:&quot;</code>也可以解决</li></ul><p>什么是Vim的寄存器？</p><ul><li>Vim里操作的是寄存器而不是系统剪贴板。</li><li>默认使用<code>d</code>删除或者<code>y</code>复制的内容都放到了“无名寄存器”</li><li>用<code>x</code>删除一个字符放到无名寄存器，然后<code>p</code>粘贴，可以调换两字符</li></ul><p>深入寄存器（register）</p><blockquote><p>Vim不使用单一剪贴板进行剪贴、复制与粘贴，而是多组寄存器</p></blockquote><ul><li>通过<code>&quot;{register}</code>前缀可以指定寄存器，不指定则默认使用无名寄存器</li><li>比如使用<code>&quot;ayiw</code>复制一个单词到寄存器<code>a</code>中，<code>&quot;bdd</code>删除当前行到寄存器<code>b</code>中</li><li>Vim中，<code>&quot;&quot;</code>表示无名寄存器,缺省使用，<code>&quot;&quot;p</code>其实就等同于<code>p</code>。<code>&quot;+</code>系统剪贴板。</li></ul><p><code>:reg a</code>：查看寄存器<code>a</code></p><p>其他常见寄存器</p><blockquote><p>除了有名寄存器a-Z，Vim中还有一些其他常见寄存器</p></blockquote><ul><li><p>复制专用寄存器<code>&quot;0</code>，使用<code>y</code>复制文本同时会被拷贝到复制寄存器<code>0</code></p></li><li><p>系统剪贴板<code>&quot;+</code>，可以在复制前加上<code>&quot;+</code>复制到系统剪贴板。</p><p>查看是否开启系统剪贴板：<code>:echo has(&#39;clipboard&#39;)</code></p><p>设置<code>:set clipboard=unnamed</code></p></li><li><p>其他寄存器，比如<code>&quot;%</code>当前文件名，<code>&quot;.</code>上次插入的文本</p></li></ul><p><code>:e!</code>：舍弃当前修改并重新加载文本内容</p><p>课后练习</p><blockquote><p>了解normal/insert模式复制粘贴的方法，常见寄存器的用法</p></blockquote><ul><li>找一段Python代码，尝试在Vim里粘贴进入</li><li>试试将Vim中的内容复制到系统粘贴板</li><li>尝试在服务器的Vim里粘贴系统剪贴板的内容</li></ul><h3 id="2-10-Vim-如何用宏完成强大的批量操作-10-23"><a href="#2-10-Vim-如何用宏完成强大的批量操作-10-23" class="headerlink" title="2-10 Vim 如何用宏完成强大的批量操作 (10:23)"></a>2-10 Vim 如何用宏完成强大的批量操作 (10:23)</h3><p>从需求说起</p><blockquote><p>从一个需求说起，给多行URL链接加上双引号</p></blockquote><pre><code>https://www.zhihu.com/question/54919485https://www.zhihu.com/explorehttps://www.zhihu.com/topichttps://www.zhihu.com/topic/19601308https://www.zhihu.com/topic/19607351https://www.zhihu.com/topic/19630716https://www.zhihu.com/topic/19637932https://www.zhihu.com/people/weikexin-67https://www.zhihu.com/questton/267339149/answer/325252706https://www.zhihu.com/question/267339149/answer/523371968https://www.zhihu.com/people/zhang-jia-hao-15https://www.zhihu.com/question/48510028https://www.zhihu.com/question/267339149/answer/323414411https://www.zhihu.com/people/ming-ming 0701https://www.zhihu.com/question/267339149/answer/519709724https://www.zhihu.com/question/answer/519709724https://www.zhihu.com/question/22897152https://www.zhihu.com/question/22130215https://www.zhihu.com/question/19823813</code></pre><p>什么是Vim宏（macro）</p><ul><li>宏可以看成是一系列命令的集合</li><li>可以使用宏「录制」一系列操作，然后用于「回放」</li><li>宏可以非常方便地把一系列命令用在多行文本上</li></ul><p>如何使用宏</p><blockquote><p>宏的使用分为录制和回放，与拍电影类似。</p></blockquote><ul><li>Vim使用<code>q</code>来录制，同时也是使用<code>q</code>结束录制</li><li>使用<code>q{register}</code>选择要保存的寄存器，把录制的命令保存其中</li><li>使用<code>@{register}</code>回放寄存器中保存的一系列命令</li></ul><p>使用宏解决提出的问题</p><ul><li><p>先给一行加上双引号，然后再回放到其他所有行</p></li><li><p>先使用<code>q</code>开始录制，给一行加上双引号，之后使用<code>q</code>退出</p></li><li><p>在剩下所有行中回放录制的宏</p><p>录制：</p><pre><code class="shell">qaI&quot;&lt;Esc&gt;A&quot;&lt;Esc&gt;jq</code></pre><p>调用方式一：</p><pre><code>10@a</code></pre><p>调用方式二：</p><pre><code>VGG:normal @a</code></pre></li></ul><p>课后练习</p><blockquote><p>知道什么是宏，如何使用宏完成日常需求</p></blockquote><ul><li>想象一下编辑代码或者文本什么时候会使用到宏？</li><li>想一下还有没有其他方式来完成这个批量加引号的编辑需求</li><li>尝试亲自操作一下宏命令编辑。</li></ul><h3 id="2-11-Vim-补全大法-07-33"><a href="#2-11-Vim-补全大法-07-33" class="headerlink" title="2-11 Vim 补全大法 (07:33)"></a>2-11 Vim 补全大法 (07:33)</h3><p>什么是补全？</p><blockquote><p>只要手速快，补全什么的都是浮云。</p></blockquote><ul><li>补全是根据当前环境上下文由编辑器「猜」用户想要输入的内容</li><li>比如补全一个单词、文件名，或者代码中的函数名、变量名等</li><li>Vim中提供了多种补全功能，还可以由插件扩展功能实现代码补全</li></ul><p>Vim中常见的补全：</p><table><thead><tr><th>命令</th><th>补全类型</th></tr></thead><tbody><tr><td><code>&lt;C-n&gt;</code></td><td>普通关键字</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-n&gt;</code></td><td><strong>当前缓冲区关键字</strong></td></tr><tr><td><code>&lt;C-x&gt;&lt;C-i&gt;</code></td><td>包含文件关键字</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-]&gt;</code></td><td>标签文件关键字</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-k&gt;</code></td><td>字典查找</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-l&gt;</code></td><td>整行补全</td></tr><tr><td><code>&lt;C-x&gt;&lt;C-f&gt;</code></td><td><strong>文件名补全</strong></td></tr><tr><td><code>&lt;C-x&gt;&lt;C-o&gt;</code></td><td><strong>全能（Omni）补全</strong></td></tr></tbody></table><p><strong>常见的三种补全类型：</strong></p><ul><li><p>使用<code>&lt;Ctrl+n&gt;</code>和<code>&lt;Ctrl+p&gt;</code>补全单词</p><p><code>Ctrl+n</code>：n(next)代表下一个补全的选项</p><p><code>Ctrl+p</code>：p(previous)代表上一个补全的选项</p></li><li><p>使用<code>&lt;Ctrl+x&gt;</code>+<code>&lt;Ctrl+f&gt;</code>补全文件名</p><p><code>Ctrl+w</code>：回删一个单词</p></li><li><p>使用<code>&lt;Ctrl+x&gt;</code>和<code>&lt;Ctrl+o&gt;</code>补全代码，需要开启文件类型检查，安装插件</p><p><code>:filetype on</code>：开启文件类型检查</p><p><code>:set filetype</code>：查看当前文件类型</p></li></ul><p><code>:r! echo %</code>：当前文件名（文件名）。<code>&quot;%p</code>也可输出文件名</p><p><code>:r! echo %:p</code>：当前文件名称（文件路径+文件名）</p><p>For more info：</p><pre><code>:help read:help filename-modifiers</code></pre><p>课后练习：</p><blockquote><p>知道如何在Vim中使用补全，补全的几种常见类型</p></blockquote><ul><li>尝试使用Vim中的补全方式来补全单词</li><li>在Vim中输入文件名的时候尝试补全，想想如何输入现有的文件名？</li><li>延伸：目前补全都是基于文本匹配的，插件可是实现代码补全。</li></ul><h3 id="2-12-给-Vim-换个配色-06-32"><a href="#2-12-给-Vim-换个配色-06-32" class="headerlink" title="2-12 给 Vim 换个配色 (06:32)"></a>2-12 给 Vim 换个配色 (06:32)</h3><p>Vim更换颜色</p><ul><li>使用<code>:colorscheme</code>显示当前的主题配色，默认是<code>default</code></li><li>使用<code>:colorscheme &lt;Ctrl+d&gt;</code>可以显示所有的配色</li><li>有中意的配色后，使用<code>:colorscheme 配色名</code>就可以修改颜色</li></ul><p><code>vim duck.go duck.py -O</code>：打开两个文件并垂直分割。在一个窗口的一个Tab页中</p><p>从网上下载配色</p><blockquote><p>默认的配色没有喜欢的怎们办？</p></blockquote><ul><li><p>从网络上寻找更好看的配色</p></li><li><p><a href="http://github.com/flazz/vim-colorschemes" target="_blank" rel="noopener">http://github.com/flazz/vim-colorschemes</a></p><p><a href="http://github.com/w0ng/vim-hybrid" target="_blank" rel="noopener">http://github.com/w0ng/vim-hybrid</a></p></li><li><p>安装之后就有大量的主题可以更换了</p><pre><code>git clone https://github.com/w0ng/vim-hybrid.gitmkdir -p ~/.vim/colorscp vim-hybrid/colors/hybrid.vim ~/.vim/colors</code></pre></li></ul><p>课后练习</p><ul><li>尝试更改Vim的配色方案，想要持久化配置需要写到<code>.vimrc</code>中</li><li>在网上选一个喜欢的配色方案，下载并使用它，比如<code>hybird</code></li><li>下载多个配色方案到<code>.vim/colors</code>并且随时更换</li></ul><h3 id="2-13-本章小结：裸-Vim-也很强-02-37"><a href="#2-13-本章小结：裸-Vim-也很强-02-37" class="headerlink" title="2-13 本章小结：裸 Vim 也很强 (02:37)"></a>2-13 本章小结：裸 Vim 也很强 (02:37)</h3><p>裸的Vim</p><blockquote><p>本节没使用配置过的Vim，而是用裸的Vim演示，目的何在？</p></blockquote><ul><li>很多初学者Vim基本命令都不熟练就开始找一些复杂的强大配置</li><li>不利于熟悉Vim，一旦出问题了还不知道怎们修复</li><li>建议初学者从裸的Vim开始学习。有些场景，比如服务器或者容器上无法配置Vim</li></ul><p>裸的Vim也很强</p><blockquote><p>学习Vim之前，先用正确打字指法和盲打</p></blockquote><ul><li>编辑代码，脑子🧠一般比手👋快，盲打有利于跟上你的大脑速度</li><li>裸的Vim也有很多强大的功能和使用方式</li><li>学会了使用Vim，可以在任何IDE上安装Vim插件，几乎所有流行的编辑器和IDE工具都支持Vim插件</li></ul><p>下一步该学习什么？</p><blockquote><p>前提是已经无障碍使用Vim，并且没有那么痛苦纠结了。</p></blockquote><ul><li>学习<strong>Vim配置</strong>，我的Vim我做主</li><li>Vim也在与时俱进，探索学习各种炫酷和方便的<strong>插件</strong></li><li>用中学，学中用。慢慢就有了肌肉记忆</li></ul><h2 id="第3章-编写-Vim-配置，我的-Vim-我做主"><a href="#第3章-编写-Vim-配置，我的-Vim-我做主" class="headerlink" title="第3章 编写 Vim 配置，我的 Vim 我做主"></a>第3章 编写 Vim 配置，我的 Vim 我做主</h2><blockquote><p>学习如何编写Vim 的配置文件，自定义 Vim。</p></blockquote><h3 id="3-1-编写-vim-配置，我的-vim-我做主-17-09"><a href="#3-1-编写-vim-配置，我的-vim-我做主-17-09" class="headerlink" title="3-1 编写 vim 配置，我的 vim 我做主 (17:09)"></a>3-1 编写 vim 配置，我的 vim 我做主 (17:09)</h3><p>什么是Vim配置</p><blockquote><p>什么是Vim的配置，为什么要使用它呢？</p></blockquote><ul><li>Vim里有非常多常用的设置，比如<code>:set number</code>设置行号</li><li>之前的使用都是在Vim里临时设置，没法持久化，每次打开文件都需要设置</li><li><code>.vimrc</code>提供了一种持久化配置的方式，让用户自定义配置</li></ul><p>如何编写Vim配置文件</p><ul><li>Linux/Unix下新建一个隐藏文件<code>vim ~/.vimrc</code></li><li>Windows系统<code>vim $MYVIMRC</code>，通过环境变量编辑配置文件</li><li>接着就可以开始自定义配置</li></ul><p>Vim配置都包含什么？</p><ul><li>常用设置。比如：<code>set number</code>设置行号、<code>colorscheme hybrid</code>设置主题</li><li>常用的Vim映射。比如：<code>noremap &lt;leader&gt;w :w&lt;cr&gt;</code>保存文件</li><li>自定义的<code>vimscript</code>函数(vim高手)和插件的配置(插件篇)</li></ul><p>常用设置：</p><ul><li>可以把常用的设置写到<code>.vimrc</code>里，避免每次打开Vim重新设置</li><li>比如设置行号<code>set number</code>、设置主题<code>colorscheme hybrid</code></li><li>Vim里有非常多的配置，可以参考大佬的配置</li></ul><p>Vim中的映射</p><blockquote><p>Vim中的映射比较复杂，源于Vim有多种模式</p></blockquote><ul><li>设置一下<code>&lt;leader&gt;</code>键，<code>let mapleader = &#39;,&#39;</code>，常用的是逗号<code>,</code>或者空格<code>&lt;Space&gt;</code></li><li>比如用<code>inoremap &lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;</code>在插入模式保存</li><li>Vim中的映射概念稍微复杂，但是非常强大</li></ul><p>Tmux使用<code>Ctrl+B+%</code>实现垂直分割屏幕</p><p>​    <code>zt</code>：将光标所在行定位于屏幕顶部</p><p>​    <code>zz</code>：将光标所在行定位于屏幕中部</p><p>​    <code>jj</code>：映射<code>&lt;Esc&gt;</code>键，退到普通normal模式</p><p>​    <code>:FormatJSON</code>：格式化JSON代码</p><p>​    <code>Ctrl+h/j/k/l</code>：映射<code>&lt;Ctrl-w&gt;+h/j/k/l</code>，光标在分屏窗口中移动</p><p>​    <code>xp</code>：普通模式下，对调字符</p><p>​    <code>:h option-list</code>：查看指令列表</p><p>Vim插件</p><blockquote><p>现代化的Vim可以通过Vim插件管理器安装插件</p></blockquote><ul><li>通过插件用户可以无限扩充Vim的功能</li><li>想要使用插件需要具备一定的Vim配置知识</li></ul><p>Vim脚本</p><blockquote><p>Vim有自己的脚本语言<code>Vimscript</code></p></blockquote><ul><li>Vim脚本对于Vim高级玩家来说可以实现强大的Vim插件</li><li>初学者知道有这个概念就好，Vim脚本是一种简单的脚本语言</li><li>可以通过<code>vimscript</code>实现更多Vim的控制，开发自己的插件</li></ul><p>课后练习</p><blockquote><p>掌握Vim配置需要对Vim本身很熟悉</p></blockquote><ul><li><p>尝试自己建立一个<code>~/.vimrc</code>文件，加入常见的设置选项</p></li><li><p>研究一下GitHub上<code>vim-go</code>教程<code>vim-go-tutoial</code>的<code>.vimrc</code>文件</p><p><a href="https://github.com/fatih/vim-go-tutorial/blob/master/vimrc" target="_blank" rel="noopener">https://github.com/fatih/vim-go-tutorial/blob/master/vimrc</a></p></li><li><p>拿来主义、网上、很多人开源了自己的配置(dotfiles)可参考学习</p><p><strong>通过把<code>.vimrc</code>配置文件放到git版本库可以同步到其他电脑或者服务器上</strong></p></li></ul><p>课程讲师的<code>.vimrc</code>文件：</p><pre><code class="shell">&quot; 常用设置&quot; 设置行号set numbercolorscheme hybrid&quot; 按F2进入粘贴模式set pastetoggle=&lt;F2&gt;&quot; 高亮搜索set hlsearch&quot; 设置折叠方式set foldmethod=indent&quot; 一些方便的映射let mapleader=&#39;,&#39;let g:mapleader=&#39;,&#39;&quot; 使用 jj 进入 normal模式inoremap jj &lt;Esc&gt;`^&quot; 使用 &lt;leader&gt;+w 直接保存inoremap &lt;leader&gt;w &lt;Esc&gt;:w&lt;cr&gt;noremap &lt;leader&gt;w :w&lt;cr&gt;&quot; 切换 buffernnoremap &lt;silent&gt; [p :bprevious&lt;cr&gt;nnoremap &lt;silent&gt; [n :bnext&lt;cr&gt;&quot; use ctrl+h/j/k/l switch windownoremap &lt;C-h&gt; &lt;C-w&gt;hnoremap &lt;C-j&gt; &lt;C-w&gt;jnoremap &lt;C-k&gt; &lt;C-w&gt;knoremap &lt;C-l&gt; &lt;C-w&gt;l&quot; Sudo to writecnoremap w!! w !sudo tee % &gt;/dev/null&quot; json 格式化com! FormatJSON %!python3 -m json.tool&quot; 插件设置，这里使用了 vim-plugcall plug#begin(&#39;~/.vim/plugged&#39;)&quot; 安装插件只需要把 github 地址放到这里重启后执行 :PlugInstall 就好了Plug &#39;mhinz/vim-startify&#39;Plug &#39;scrooloose/nerdtree&#39;call plug#end()&quot; 插件相关配置&quot; 禁止 stratify 自动切换目录let g:startify_change_to_dir = 0&quot; nerdtreenmap ,v :NERDTreeFind&lt;cr&gt;nmap ,g :NERDTreeToggle&lt;cr&gt;&quot; 定义函数SetTitle，自动插入文件头func SetTitle()    if &amp;filetype == &#39;python&#39;        call setline(1, &quot;\#!/usr/bin/env python&quot;)        call setline(2, &quot;\# -*- coding:utf-8 -*-&quot;)        normal G        normal o        normal o        call setline(5, &quot;if __name__ == &#39;__main__&#39;:&quot;)        call setline(6, &quot;    pass&quot;)    endifendfunc</code></pre><h3 id="3-2-Vim-映射迷人眼-14-53"><a href="#3-2-Vim-映射迷人眼-14-53" class="headerlink" title="3-2 Vim 映射迷人眼 (14:53)"></a>3-2 Vim 映射迷人眼 (14:53)</h3><p>什么是Vim映射</p><blockquote><p>Vim映射就是把「一个操作」映射到「另一个操作」</p></blockquote><ul><li>如果你不满意现在的按键设置，比如Vim本来的命令</li><li>或者想要映射一些方便的快捷键</li><li>按照用户意愿定制Vim</li></ul><p>基本映射</p><blockquote><p>基本映射指的是在普通normal模式下的映射，当然还有其他模式的映射</p></blockquote><ul><li><p>使用<code>map</code>就可以实现映射。比如：<code>:map - x</code>按<code>-</code>就会删除字符</p><p>取消<code>map</code>映射使用<code>:unmap -</code></p></li><li><p><strong><code>:map &lt;space&gt; viw</code>按空格键<code>&lt;space&gt;</code>就会选中光标所在的整个单词</strong></p></li><li><p><code>:map &lt;C-d&gt; dd</code>按<code>Ctrl+d</code>执行<code>dd</code>删除一行</p></li></ul><p>模式映射</p><blockquote><p>Vim常用模式normal/visual/insert都可以定义映射</p></blockquote><ul><li><p>用<code>nmap</code>/<code>vmap</code>/<code>imap</code>定义映射,只在normal/visual/insert分别有效</p></li><li><p><code>:vmap \ U</code>：把在visual模式下选中的文本大小写(u(小写)/U(大写)转化大小写)</p></li><li><p>想想如何在insert模式下映射<code>Ctrl+d</code>来删除一行</p><p><code>:imap &lt;C-d&gt; &lt;Esc&gt;ddi</code></p></li></ul><p><strong>现有映射的问题？</strong></p><blockquote><pre><code>:nmap - dd:nmap \ -</code></pre><p>当按下<code>\</code>时，Vim会解析<code>\</code>为<code>-</code>；因为又映射了<code>-</code>，Vim会继续解析<code>-</code>为<code>dd</code>，即最终按下<code>\</code>会删除整行。（类似于递归解析映射）</p></blockquote><p>递归映射和非递归映射</p><blockquote><p><strong><code>*map</code>系列命令有递归的风险</strong></p></blockquote><ul><li>如果用户安装了一个插件，插件映射了同一个按键的不同行为，有冲突就会有一个失效</li><li>想要保证插件映射没有冲突会非常痛苦</li><li>解决方案就是使用非递归映射</li></ul><p>非递归映射</p><blockquote><p>Vim提供了非递归映射，这些命令不会递归解析</p></blockquote><ul><li>使用<code>*map</code>对应的<code>nnoremap</code>/<code>vnoremap</code>/<code>inoremap</code></li><li>何时使用递归映射<code>*map</code>？何时使用非递归映射<code>*noremap</code>呢？</li><li>「任何」时候都应该使用非递归映射，拯救自己同时也拯救了插件作者</li></ul><p><strong>``^<code>：光标回到最后一次插入模式停止时光标的位置。</code>:help <code>^</code>查看帮助。</strong></p><p>课后练习</p><ul><li><p>尝试在<code>.vimrc</code>文件中定义一些映射，提升工作效率</p></li><li><p>参考一些开源的Vim配置，看看哪些映射可以拿来使用</p></li><li><p>阅读《笨方法学Vimscript》书中关于映射的章节。</p><p><a href="http://learnvimscriptthehardway.onefloweroneworld.com/" target="_blank" rel="noopener">http://learnvimscriptthehardway.onefloweroneworld.com/</a></p></li></ul><h3 id="3-3-本章小结：配置-Vim，让她更顺手-01-16"><a href="#3-3-本章小结：配置-Vim，让她更顺手-01-16" class="headerlink" title="3-3 本章小结：配置 Vim，让她更顺手 (01:16)"></a>3-3 本章小结：配置 Vim，让她更顺手 (01:16)</h3><p>学习和使用配置</p><blockquote><p>学习和使用Vim配置是Vim玩家进阶的必修之路</p></blockquote><ul><li>了解常见的配置选项</li><li>学习和使用Vim映射，用得不爽我就改</li><li>Vim进阶需要学习Vimscript。《笨发放学Vimscript》</li></ul><p>下一步该学什么？</p><blockquote><p>强大的Vim插件</p></blockquote><ul><li>Vim也在与时俱进，发布了Vim8，还有Neovim</li><li>知道如何配置Vim之后，开始探索各种强大的Vim插件</li><li>打好<strong>Vim配置</strong>和<strong>映射</strong>的基础，开始学习如何安装和使用插件</li></ul><h2 id="第4章-Vim-安装和使用插件"><a href="#第4章-Vim-安装和使用插件" class="headerlink" title="第4章 Vim 安装和使用插件"></a>第4章 Vim 安装和使用插件</h2><blockquote><p>学会如何安装和使用常见的 Vim 插件，增强 Vim 的功能。</p></blockquote><h3 id="4-1-Vim-安装插件，竟如此简单-08-40"><a href="#4-1-Vim-安装插件，竟如此简单-08-40" class="headerlink" title="4-1 Vim 安装插件，竟如此简单 (08:40)"></a>4-1 Vim 安装插件，竟如此简单 (08:40)</h3><p>什么是插件？</p><blockquote><p>和其他现代流行编辑器一样，Vim同样支持强大的插件扩展</p></blockquote><ul><li>Vim插件是使用vimscript或者其他语言编写的vim功能扩展</li><li>编辑器自带的功能有限，有了插件之后几乎可以无限扩充其功能</li><li>网络上比如GitHub.com等有很多开源的Vim插件可以使用</li></ul><p>如何安装插件？</p><blockquote><p>原始的方式是直接clone插件代码，如今Vim有很多插件管理器</p></blockquote><ul><li><p>目前Vim有很多插件管理器可供选择</p></li><li><p>常见的有：<code>vim-plug</code>、<code>Vundle</code>、<code>Pathogen</code>、<code>Dein.Vim</code>、<code>volt</code>等</p></li><li><p>综合性能、易用性、文档等几个方面，推荐使用<code>vim-plug</code></p><p><a href="https://www.slant.co/topics/1224/~best-plugin-managers-for-vim" target="_blank" rel="noopener">https://www.slant.co/topics/1224/~best-plugin-managers-for-vim</a></p></li></ul><p>使用<code>vim-plug</code>安装插件</p><ul><li><p><a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug</a></p></li><li><p>学习一个新东西的最好方式就是看官方文档</p></li><li><p>按照官方的教程，就可以非常容易地了解它的使用方式</p><pre><code class="shell">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</code></pre></li></ul><p>安装第一个插件<code>vim-startify</code></p><blockquote><p>一个好用的vim开屏插件</p></blockquote><ul><li><p><a href="https://github.com/mhinz/vim-startify" target="_blank" rel="noopener">https://github.com/mhinz/vim-startify</a></p></li><li><p>修改<code>.vimrc</code>配置文件，增加该插件的名称</p></li><li><p>重新启动vim或者执行<code>:source ~/.vimrc</code>，执行<code>:PlugInstall</code></p><pre><code class="shell">call plug#begin(&#39;~/.vim/plugged&#39;)Plug &#39;mhinz/vim-startify&#39;call plug#end()</code></pre><p><code>:source ~/.vimrc</code></p><p><code>:PlugInstall</code></p></li><li><p>如果已经安装完成，退出并重新打开Vim查看效果</p></li></ul><p>课后练习</p><blockquote><p>打开Vim操练起来，首先下载vim-plug并浏览其文档</p></blockquote><ul><li>安装vim-plug插件管理器</li><li>安装vim插件vim-startify、nerdtree，看看能否生效</li></ul><h3 id="4-2-如何寻找自己需要的插件-06-42"><a href="#4-2-如何寻找自己需要的插件-06-42" class="headerlink" title="4-2 如何寻找自己需要的插件 (06:42)"></a>4-2 如何寻找自己需要的插件 (06:42)</h3><ul><li><p>Google关键词搜索</p></li><li><p><a href="https://github.com/vim-awesome/vim-awesome" target="_blank" rel="noopener">https://github.com/vim-awesome/vim-awesome</a></p><p><a href="https://vimawesome.com/" target="_blank" rel="noopener">https://vimawesome.com/</a></p></li><li><p>浏览网上开源的vim配置，借鉴想要的插件</p></li></ul><h3 id="4-3-vim美化插件，让你的-vim-与众不同-09-57"><a href="#4-3-vim美化插件，让你的-vim-与众不同-09-57" class="headerlink" title="4-3 vim美化插件，让你的 vim 与众不同 (09:57)"></a>4-3 vim美化插件，让你的 vim 与众不同 (09:57)</h3><p>vim美化插件</p><blockquote><p>更改vim的外观</p></blockquote><ul><li><p>修改启动界面：<a href="https://github.com/mhinz/vim-startify" target="_blank" rel="noopener">https://github.com/mhinz/vim-startify</a></p><p><code>:Startify</code></p></li><li><p>状态栏美化：<a href="https://github.com/vim-airline/vim-airline" target="_blank" rel="noopener">https://github.com/vim-airline/vim-airline</a></p><p><a href="https://github.com/vim-airline/vim-airline-themes" target="_blank" rel="noopener">https://github.com/vim-airline/vim-airline-themes</a></p></li><li><p>增加代码缩进线条：<a href="https://github.com/Yggdroot/indentLine" target="_blank" rel="noopener">https://github.com/Yggdroot/indentLine</a></p></li></ul><p>vim配色方案</p><ul><li>vim-hybrid配色：<a href="https://github.com/w0ng/vim-hybrid" target="_blank" rel="noopener">https://github.com/w0ng/vim-hybrid</a></li><li>solarized配色：<a href="https://github.com/altercation/vim-colors-solarized" target="_blank" rel="noopener">https://github.com/altercation/vim-colors-solarized</a></li><li>gruvbox配色：<a href="https://github.com/morhetz/gruvbox" target="_blank" rel="noopener">https://github.com/morhetz/gruvbox</a></li></ul><p>课后练习</p><ul><li>尝试使用vim-stratify快速打开最近使用的文件</li><li>安装vim-airline美化状态栏</li><li>安装indentline给vim增加代码缩进线</li></ul><h3 id="4-4-Vim文件目录和搜索插件，跳转文件so-easy-12-20"><a href="#4-4-Vim文件目录和搜索插件，跳转文件so-easy-12-20" class="headerlink" title="4-4 Vim文件目录和搜索插件，跳转文件so easy (12:20)"></a>4-4 Vim文件目录和搜索插件，跳转文件so easy (12:20)</h3><p><strong>文件目录树</strong>：</p><blockquote><p>默认的文件目录管理比较简陋，nerdtree弥补了这个问题</p></blockquote><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gj3vo85oj311w0o87le.jpg" alt="文件目录树" style="zoom:45%;" /><p>文件管理器nerdtree</p><blockquote><p>使用nerdtree插件进行文件目录树管理</p></blockquote><ul><li><p><a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="noopener">https://github.com/scrooloose/nerdtree</a></p><p><code>:NERDTree</code></p><p><code>:NERDTreeFind</code></p><p><code>:NERDTreeToggle</code></p></li><li><p><code>autocmd vimenter * NERDTree</code>可以在启动vim的时候打开NERDTree‘</p></li><li><p><code>map &lt;leader&gt;v :NERDTreeFind&lt;CR&gt;</code>查找文件位置</p></li></ul><p><strong>快速搜索文件</strong>：</p><blockquote><p>如何根据文件名快速查找打开一个文件</p></blockquote><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gk4xgm5mj316e0m0137.jpg" alt="快速搜索文件" style="zoom:45%;" /><p>模糊搜索器</p><blockquote><p>使用ctrlp插件快速查找并且打开文件</p></blockquote><ul><li><a href="https://github.com/ctrlpvim/ctrlp.vim" target="_blank" rel="noopener">https://github.com/ctrlpvim/ctrlp.vim</a></li><li><code>let g:ctrlp_map = &#39;&lt;c-p&gt;&#39;</code></li><li>使用<Ctrl-p>，然后输入少量字符就可以开始搜索</li></ul><p>课后练习</p><blockquote><p>快速定位文件是常用操作，需牢牢掌握提升效率</p></blockquote><ul><li>安装nerdtree插件，加入快捷键映射</li><li>安装ctrlp插件，然后使用快速定位文件</li><li>改变自己之前低效的操作方式，适应新的操作方式</li></ul><h3 id="4-5-Vim快速定位插件，文件位置任我行-05-58"><a href="#4-5-Vim快速定位插件，文件位置任我行-05-58" class="headerlink" title="4-5 Vim快速定位插件，文件位置任我行 (05:58)"></a>4-5 Vim快速定位插件，文件位置任我行 (05:58)</h3><p>Vim移动命令：</p><blockquote><p>在基础篇学习了很多Vim移动的命令</p></blockquote><ul><li>比如，<code>w</code>/<code>e</code>基于单词移动，<code>gg</code>/<code>G</code>文件首尾，<code>0</code>/<code>$</code>行首尾，<code>f{char}</code>查询字符</li><li><code>Ctrl+f</code>、<code>Ctrl+u</code>前后翻屏</li><li>如果需要快速跳转到当前窗口显示区的任意位置需要怎们做？</li></ul><p>如何快速移动到任意位置</p><blockquote><p>可以使用vim的搜索/加上n跳转，但是使用easymotion更方便</p></blockquote><ul><li><a href="https://github.com/easymotion/vim-easymotion" target="_blank" rel="noopener">https://github.com/easymotion/vim-easymotion</a></li><li>官方文档较长，其实一个映射就能应付</li><li><code>nmap ss &lt;Plug&gt;(easymotion-s2)</code></li></ul><p>课后练习</p><blockquote><p>安装并使用easymotion插件</p></blockquote><ul><li>回忆一下vim里常用的移动操作</li><li>安装easymotion插件</li><li>使用easymotion练习在文件窗口的任意位置跳转</li></ul><h3 id="4-6-Vim-surround，编辑也要成双成对-05-27"><a href="#4-6-Vim-surround，编辑也要成双成对-05-27" class="headerlink" title="4-6 Vim-surround，编辑也要成双成对 (05:27)"></a>4-6 Vim-surround，编辑也要成双成对 (05:27)</h3><p>vim-surround</p><blockquote><p> 如何快速更换一对单引号为双引号?</p></blockquote><ul><li><p>一个一个查找然后替换</p></li><li><p><a href="https://github.com/tpope/vim-surround" target="_blank" rel="noopener">https://github.com/tpope/vim-surround</a></p></li></ul><p>vim-surround使用</p><blockquote><p>normal模式下增加、删除、修改成对内容</p></blockquote><ul><li><code>ds</code>（delete a surrounding）</li><li><code>cs</code>（change a surrounding）</li><li><code>ys</code>（you add a surrounding）</li></ul><p>例子：</p><ul><li><code>ysiw&quot;</code>：给单词增加<code>&quot;</code></li><li><code>cs&quot;&#39;</code>：修改<code>&quot;</code>为<code>&#39;</code></li><li><code>cs(]</code>：修改<code>(</code>为<code>]</code>，替换后的括号需要使用后括号，前括号会产生空格</li><li><code>ds&#39;</code>：删除<code>&#39;</code></li><li><code>ds(</code>：删除<code>(</code></li></ul><p>课后练习</p><blockquote><p>vim-surround大法好</p></blockquote><ul><li>使用vim-plug安装vim-surround插件</li><li>使用练习修改成对的内容，比如修改单引号为双引号</li><li>多练习几次，使用插件提升编辑效率</li></ul><h3 id="4-7-强大的Vim模糊搜索与替换插件-08-26"><a href="#4-7-强大的Vim模糊搜索与替换插件-08-26" class="headerlink" title="4-7 强大的Vim模糊搜索与替换插件 (08:26)"></a>4-7 强大的Vim模糊搜索与替换插件 (08:26)</h3><p>模糊搜索</p><blockquote><p>经常需要在一个代码项目中模糊搜索一些文本，怎们办？</p></blockquote><ul><li>vim自带的搜索可以搜索当前文件，但是项目有很多个文件</li><li>需要使用插件来模糊搜索多个文件内容</li><li>使用Ag.vim或者fzf.vim，都可以很好的支持模糊搜索</li></ul><p>fzf与fzf.vim</p><blockquote><p>fzf是一个强大的命令行模糊搜索工具，fzf.vim集成到了vim里</p></blockquote><ul><li><p><a href="https://github.com/junegunn/fzf.vim" target="_blank" rel="noopener">https://github.com/junegunn/fzf.vim</a></p></li><li><p>安装</p><pre><code class="shell">Plug &#39;junegunn/fzf&#39;, { &#39;dir&#39;: &#39;~/.fzf&#39;, &#39;do&#39;: &#39;./install --all&#39; }Plug &#39;junegunn/fzf.vim&#39;</code></pre></li><li><p>使用<code>Ag [PATTERN]</code>模糊搜索字符串</p></li><li><p>使用<code>Files [PATH]</code>模糊搜索目录</p></li><li><p>更多命令：<a href="https://github.com/junegunn/fzf.vim#commands" target="_blank" rel="noopener">https://github.com/junegunn/fzf.vim#commands</a></p></li></ul><p>例子：</p><p><code>:Files .</code>：查看当前目录下的所有文件，再输入文件名实现搜索</p><p><code>:Ag {PATTERN}</code>：查找文本内容。</p><p>此处遇到了一个问题：ag is not found</p><p>解决方法参考：<a href="https://github.com/junegunn/fzf.vim/issues/440" target="_blank" rel="noopener">https://github.com/junegunn/fzf.vim/issues/440</a></p><p>搜索替换插件far.vim</p><blockquote><p>如果想要批量搜索替换，可以使用far.vim</p></blockquote><ul><li><p><a href="https://github.com/brooth/far.vim" target="_blank" rel="noopener">https://github.com/brooth/far.vim</a></p></li><li><p>使用</p><pre><code class="shell">:Far foo bar **/*.py:Fardo</code></pre></li><li><p>比如在代码重构的时候会经常使用到</p></li><li><p><code>:Far foo bar **/*.py</code></p></li></ul><p>课后练习</p><blockquote><p>模糊搜索和替换是一个非常常用的操作</p></blockquote><ul><li>使用vim-plug安装fzf.vim和far.vim</li><li>使用fzf.vim在一个项目中搜索想要的文本</li><li>使用far.vim批量替换一个项目下的文本</li></ul><h3 id="4-8-愉快写-golang-之vim-go插件-10-19"><a href="#4-8-愉快写-golang-之vim-go插件-10-19" class="headerlink" title="4-8 愉快写 golang 之vim-go插件 (10:19)"></a>4-8 愉快写 golang 之vim-go插件 (10:19)</h3><p>编辑器 VS IDE</p><blockquote><p>IDE一代又一代，经典的编辑器却长久不衰</p></blockquote><ul><li>除了Java，很多人用vim编写shell/php/golang/python/ruby</li><li>前端很多人使用VSCode，sublime/Atom有没落之势</li><li>很多后端和运维工程师使用vim，微信后台和阿里飞天系统很多代码出自在服务器上使用vim的工程师</li></ul><p>vim-go</p><blockquote><p>功能强大的golang插件vim-go</p></blockquote><ul><li><p><a href="https://github.com/fatih/vim-go" target="_blank" rel="noopener">https://github.com/fatih/vim-go</a></p></li><li><p>代码补全、重构、跳转、自动格式化、自动导入等功能</p></li><li><p>基本可以满足golang日常开发</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;Ctrl-x&gt;&lt;Ctrl-o&gt;</code></td><td>打开补全列表</td></tr><tr><td><code>&lt;Ctrl-p&gt;</code></td><td>向上选择补全</td></tr><tr><td><code>&lt;Ctrl-n&gt;</code></td><td>向下选择补全</td></tr><tr><td><code>&lt;Ctrl-]&gt;</code></td><td>跳转到定义的方法</td></tr><tr><td><code>&lt;Ctrl-o&gt;</code></td><td>跳转到上一次的地方</td></tr><tr><td><code>&lt;Ctrl-i&gt;</code></td><td>跳转到上一次的地方</td></tr></tbody></table><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:GoFmt</code></td><td>格式化代码</td></tr><tr><td><code>:GoRename</code></td><td>重构名称</td></tr><tr><td><code>:GoImports</code></td><td>自动带入包</td></tr><tr><td><code>:GoRun</code></td><td>运行代码</td></tr><tr><td><code>:w</code></td><td>保存文件自动格式化代码</td></tr></tbody></table></li><li><p>vimrc配置：</p><pre><code class="shell">autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4</code></pre></li></ul><p>课后练习</p><ul><li>安装vim-go插件，阅读vim-go-tutorial教程</li><li>使用vim-go编写Go语言代码</li><li>如果遇到了问题，请查看vim-go-tutorial教程或者vim-go文档</li></ul><h3 id="4-9-python-mode把-vim-打造成轻量-Python-IDE-07-11"><a href="#4-9-python-mode把-vim-打造成轻量-Python-IDE-07-11" class="headerlink" title="4-9 python-mode把 vim 打造成轻量 Python IDE (07:11)"></a>4-9 python-mode把 vim 打造成轻量 Python IDE (07:11)</h3><p>Python-mode</p><blockquote><p>Python插件使用比较多的是jedi-vim和Python-mode</p></blockquote><ul><li><a href="https://github.com/python-mode/python-mode" target="_blank" rel="noopener">https://github.com/python-mode/python-mode</a></li><li>Python-mode具备基本的补全、跳转、重构、格式化功能</li><li>即使是在服务器上也能方便的调试Python代码</li></ul><ul><li><p>查看是否支持python：<code>vim --version | grep python</code>：</p></li><li><p>vimrc配置</p><pre><code class="shell">let g:pymode_python = &#39;python3&#39;let g:pymode_trim_whitespaces = 1let g:pymode_doc = 1let g:pymode_doc_bind = &#39;K&#39;let g:pymode_rope_goto_definition_bind = &#39;&lt;C-]&gt;&#39;let g:pymode_lint = 1let g:pymode_lint_checkers = [&#39;pyflakes&#39;, &#39;pep8&#39;, &#39;mccabe&#39;, &#39;pylint&#39;]let g:pymode_options_max_line_length = 120</code></pre></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;Ctrl-x&gt;&lt;Ctrl-o&gt;</code></td><td>打开补全列表</td></tr><tr><td><code>&lt;Ctrl-p&gt;</code></td><td>向上选择补全</td></tr><tr><td><code>&lt;Ctrl-n&gt;</code></td><td>向下选择补全</td></tr><tr><td><code>&lt;Ctrl-]&gt;</code></td><td>跳转到定义的方法</td></tr><tr><td><code>&lt;Ctrl-o&gt;</code></td><td>跳转到上一次的地方</td></tr><tr><td><code>&lt;Ctrl-i&gt;</code></td><td>跳转到上一次的地方</td></tr><tr><td><code>&lt;Ctrl-C&gt;ro</code></td><td>整理导入包的顺序</td></tr></tbody></table><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:PymodeLintAuto</code></td><td>自动Lint整理格式代码</td></tr><tr><td><code>:w</code></td><td>保存文件时做文件静态检查，并提示相应错误</td></tr></tbody></table><p>课后练习：</p><ul><li>安装python-mode插件</li><li>使用python-mode编写Python代码</li><li>如果遇到了问题，尝试查询python-mode文档解决</li></ul><h3 id="4-10-Vim-tagbar，更愉快地浏览代码-11-14"><a href="#4-10-Vim-tagbar，更愉快地浏览代码-11-14" class="headerlink" title="4-10 Vim tagbar，更愉快地浏览代码 (11:14)"></a>4-10 Vim tagbar，更愉快地浏览代码 (11:14)</h3><p>tagbar</p><blockquote><p>代码大纲，支持多种编程语言</p></blockquote><ul><li><p><a href="https://github.com/majutsushi/tagbar" target="_blank" rel="noopener">https://github.com/majutsushi/tagbar</a></p></li><li><p>需要安装Universal Ctags生成对应的tag文件</p></li><li><p>快速浏览当前文件代码结构，并且搜索跳转到对应代码块</p></li><li><p>vimrc配置</p><pre><code class="shell">nnoremap &lt;leader&gt;t :TagbarToggle&lt;CR&gt;</code></pre></li></ul><p>安装ctags：</p><ul><li><p>Universal Ctags：<a href="https://ctags.io/" target="_blank" rel="noopener">https://ctags.io/</a></p></li><li><p><a href="https://docs.ctags.io/en/latest/osx.html#building-with-homebrew" target="_blank" rel="noopener">https://docs.ctags.io/en/latest/osx.html#building-with-homebrew</a></p><pre><code class="shell">brew tap universal-ctags/universal-ctagsbrew install --HEAD universal-ctags</code></pre></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>:Tagbar</code></td><td>显示Tagbar</td></tr><tr><td><code>:TagbarToggle</code></td><td>显示Tagbar并定位到当前方法的目录</td></tr><tr><td><code>:ls</code></td><td>查看buffer</td></tr><tr><td><code>:b duck.py</code></td><td>跳转到duck.py的buffer</td></tr></tbody></table><p>vim-interestingwords</p><blockquote><p>高亮感兴趣的单词，浏览代码很有用</p></blockquote><ul><li><a href="https://github.com/lfv89/vim-interestingwords" target="_blank" rel="noopener">https://github.com/lfv89/vim-interestingwords</a></li><li>浏览代码的时候经常需要知道一个变量的使用方式</li><li>可以使用这个插件同时高亮多个单词</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;k</code></td><td>高亮单词</td></tr><tr><td><code>u</code>/<code>U</code></td><td>下/上一个高亮</td></tr><tr><td><code>&lt;leader&gt;K</code></td><td>取消所有高亮</td></tr></tbody></table><p>课后练习</p><ul><li>安装tagbar，开启文件代码大纲</li><li>安装interestingwords，高亮感兴趣的单词</li><li>如果遇到了问题，尝试查询插件的官方文档/Google搜索/vim help解决</li></ul><h3 id="4-11-强大的-vim-代码补全插件-07-16"><a href="#4-11-强大的-vim-代码补全插件-07-16" class="headerlink" title="4-11 强大的 vim 代码补全插件 (07:16)"></a>4-11 强大的 vim 代码补全插件 (07:16)</h3><p>deoplete.nvim</p><blockquote><p>一个强大的neovim/vim8异步补全插件</p></blockquote><ul><li><a href="https://github.com/Shougo/deoplete.nvim" target="_blank" rel="noopener">https://github.com/Shougo/deoplete.nvim</a></li><li>多编程语言的支持，支持模糊匹配</li><li>需要安装对应编程语言的扩展</li></ul><p>安装：</p><pre><code class="shell">if has(&#39;nvim&#39;)  Plug &#39;Shougo/deoplete.nvim&#39;, { &#39;do&#39;: &#39;:UpdateRemotePlugins&#39; }else  Plug &#39;Shougo/deoplete.nvim&#39;  Plug &#39;roxma/nvim-yarp&#39;  Plug &#39;roxma/vim-hug-neovim-rpc&#39;endif</code></pre><p>如若报错请安装依赖：</p><pre><code class="shell">pip3 install --user pynvim</code></pre><p>配置：</p><pre><code class="shell">let g:deoplete#enable_at_startup = 1</code></pre><p>其他代码补全插件</p><ol><li><p>deoplete-jedi：</p><blockquote><p>Python语言代码补全，可以补全自己所写的库</p><p><a href="https://github.com/deoplete-plugins/deoplete-jedi" target="_blank" rel="noopener">https://github.com/deoplete-plugins/deoplete-jedi</a></p></blockquote></li><li><p>deoplete-go：</p><blockquote><p>Go语言代码补全</p><p><a href="https://github.com/deoplete-plugins/deoplete-go" target="_blank" rel="noopener">https://github.com/deoplete-plugins/deoplete-go</a></p></blockquote></li></ol><p>coc.nvim</p><blockquote><p>一个强大的neovim/vim8补全插件。LSP支持</p><p>LSP（Language-Server-Protocol）</p></blockquote><ul><li><a href="https://github.com/neoclide/coc.nvim" target="_blank" rel="noopener">https://github.com/neoclide/coc.nvim</a></li><li>full language server protocol support as VSCode</li><li>多语言插件支持</li></ul><p>课后练习</p><ul><li>安装deoplete.nvim和coc.nvim</li><li>安装对应的编程语言扩展</li><li>vim/neovim补全插件很多，有些支持异步。</li></ul><h3 id="4-12-Vim代码格式化与静态检查-09-43"><a href="#4-12-Vim代码格式化与静态检查-09-43" class="headerlink" title="4-12 Vim代码格式化与静态检查 (09:43)"></a>4-12 Vim代码格式化与静态检查 (09:43)</h3><p>格式化与静态检查</p><blockquote><p>为什么需要这些工具呢？能让工具做的就不用让人去费心</p></blockquote><ul><li>把精力集中在代码逻辑本身，而不是整理格式这些浪费精力的事情上</li><li>静态检查是为了让编写的代码更加规范。golint/pylint/eslint等</li><li>无论编写何种编程语言，最好都加上自动格式化和静态检查</li></ul><p>Neoformat</p><blockquote><p>vim-autoformat和Neoformat是两种使用较多的格式化插件，这里使用neoformat</p></blockquote><ul><li><a href="https://github.com/sbdchd/neoformat" target="_blank" rel="noopener">https://github.com/sbdchd/neoformat</a></li><li>需要安装对应语言的格式化库。python的autopep8、javascript的prettier等</li></ul><p>安装依赖：</p><pre><code class="shell">pip3 install autopep8</code></pre><p><code>:Neoformat</code>：格式化Python代码</p><p>静态检查Lint</p><blockquote><p>neomake和ale是两种常见的lint插件，这里使用ale</p></blockquote><ul><li><a href="https://github.com/dense-analysis/ale" target="_blank" rel="noopener">https://github.com/dense-analysis/ale</a></li><li>需要安装对应语言的lint库。比如golint/pylint/eslint等</li><li>vim8/neovim支持异步检查，不会影响vim编辑，推荐使用</li></ul><p>安装依赖：</p><pre><code class="shell">pip3 install pylint</code></pre><p>课后练习</p><blockquote><p>让插件帮助完成代码的格式化和静态检查吧。</p></blockquote><ul><li>安装noeformat插件和相关的格式化库，格式化代码</li><li>安装ale和对应语言的lint库，修复代码的缺陷</li><li>需要自定义检查功能（比如忽略某些检查错误），参考官方文档</li></ul><h3 id="4-13-Vim快速注释代码-03-06"><a href="#4-13-Vim快速注释代码-03-06" class="headerlink" title="4-13 Vim快速注释代码 (03:06)"></a>4-13 Vim快速注释代码 (03:06)</h3><p>vim-commentary</p><blockquote><p>vim注释插件有很多，推荐使用轻量的vim-commentary</p></blockquote><ul><li><a href="https://github.com/tpope/vim-commentary" target="_blank" rel="noopener">https://github.com/tpope/vim-commentary</a></li><li>记住常用的命令：gc注释和取消注释</li><li>插件会根据不同的文件类型使用不同注释。python(#)、golang(//)</li></ul><p>行注释：</p><ul><li><code>gcc</code>：注释代码</li><li><code>gcgc</code>：取消注释代码</li></ul><p>块注释：</p><ul><li><code>gc</code>：注释/取消注释代码</li></ul><p>课后练习</p><ul><li>安装vim-commentary插件</li><li>尝试打开Python文件并快速注释一段代码</li><li>打开不同类型的文件，比如go文件，试试注释一段代码或文字</li></ul><h3 id="4-14-vim和git，强强联手-07-11"><a href="#4-14-vim和git，强强联手-07-11" class="headerlink" title="4-14 vim和git，强强联手 (07:11)"></a>4-14 vim和git，强强联手 (07:11)</h3><p>Fugitive</p><blockquote><p>在vim里使用git</p></blockquote><ul><li><a href="https://github.com/tpope/vim-fugitive" target="_blank" rel="noopener">https://github.com/tpope/vim-fugitive</a></li><li>Gedit、Gdiff、Gblame、Gcommit等</li><li>使用tmux新开一个窗口来使用git</li></ul><p>vim-gitgutter</p><blockquote><p>在vim里显示文件变动</p></blockquote><ul><li><a href="https://github.com/airblade/vim-gitgutter" target="_blank" rel="noopener">https://github.com/airblade/vim-gitgutter</a></li><li>当修改文件之后可以显示当前文件的变动</li><li>哪些行新增，哪些行修改，哪些行删除</li></ul><p>配置：</p><pre><code class="shell">set updatetime = 100</code></pre><p>gv.vim</p><blockquote><p>在命令行查看提交记录，命令行工具tig</p></blockquote><ul><li><p><a href="https://github.com/junegunn/gv.vim" target="_blank" rel="noopener">https://github.com/junegunn/gv.vim</a></p></li><li><p>使用<code>:GV</code>命令调用</p></li><li><p>可以浏览代码提交变更</p></li></ul><p>tig</p><ul><li><p><a href="https://github.com/jonas/tig" target="_blank" rel="noopener">https://github.com/jonas/tig</a></p></li><li><p><a href="https://www.jianshu.com/p/d9f60c0abbf7" target="_blank" rel="noopener">tig — 让 git 命令行可视化</a></p></li></ul><p>课后练习</p><ul><li>安装三个git插件</li><li>使用<code>:Gblame</code>等命令</li><li>vim和tmux配合使用</li></ul><h3 id="4-15-本章小结：授人以渔，寻找自己需要的插件-02-29"><a href="#4-15-本章小结：授人以渔，寻找自己需要的插件-02-29" class="headerlink" title="4-15 本章小结：授人以渔，寻找自己需要的插件 (02:29)"></a>4-15 本章小结：授人以渔，寻找自己需要的插件 (02:29)</h3><p>Vim插件千千万</p><blockquote><p>本章介绍了如何安装使用常用的插件</p></blockquote><ul><li>Vim插件很多，不可能都全部介绍。学会自己寻找个安装</li><li>通过搜索引擎Google关键词、vimawesome、参考开源配置寻找插件</li><li>学会阅读插件的README文件和doc里的帮助文件，学习插件使用</li></ul><p>缺什么就找什么插件吧！</p><h2 id="第5章-与时俱进的-Vim"><a href="#第5章-与时俱进的-Vim" class="headerlink" title="第5章 与时俱进的 Vim"></a>第5章 与时俱进的 Vim</h2><blockquote><p>介绍如何安装和使用现有的开源配置，什么是 Neovim 等，站在巨人的肩膀上。</p></blockquote><h3 id="5-1-Vim和Tmux-天作之合-08-27"><a href="#5-1-Vim和Tmux-天作之合-08-27" class="headerlink" title="5-1 Vim和Tmux,天作之合 (08:27)"></a>5-1 Vim和Tmux,天作之合 (08:27)</h3><p>Tmux</p><blockquote><p>强大的终端复用工具。通过brew(Mac)、apt-get(ubuntu)安装</p></blockquote><ul><li>可以复用终端、分屏、托管进程等</li><li>在服务器上即使退出服务器也不会被kill，托管进程也很方便</li><li>可以方便地分割屏幕，实现多个进程公用屏幕</li></ul><p>Tmux使用文章：<a href="https://zhuanlan.zhihu.com/p/43687973" target="_blank" rel="noopener">手把手教你使用终端复用神器 Tmux，丢掉鼠标不是梦</a></p><p><code>&lt;Ctrl-b&gt;%</code>：垂直分屏</p><p><code>&lt;Ctrl-b&gt;&quot;</code>：水平分屏</p><p><code>&lt;Ctrl-b&gt;c</code>：创建新tmux窗口</p><p><code>&lt;Ctrl-b&gt;n</code>：跳转到下一个tmux窗口</p><p><code>&lt;Ctrl-b&gt;p</code>：跳转到上一个tmux窗口</p><p><code>&lt;Ctrl-b&gt;h</code>：向左切换分屏</p><p><code>&lt;Ctrl-b&gt;l</code>：向右切换分屏</p><p><code>&lt;Ctrl-b&gt;s</code>：查看所有会话</p><p><code>&lt;Ctrl-b&gt;d</code>：脱离当前会话。d(etach）</p><p><code>tmux ls</code>：查看会话列表</p><p><code>tmux new -s &lt;session_name&gt;</code>：创建会话</p><p><code>tmux att -t &lt;session_name&gt;</code>：链接会话。att(ach)</p><p>课后练习</p><blockquote><p>在系统或者服务器上安装tmux</p></blockquote><ul><li>使用tmux分割屏幕</li><li>尝试一个窗口编写代码，另一个窗口使用shell命令</li><li>尝试退出和重新attach到一个tmux的会话</li></ul><h3 id="5-2-无处不在的-vim，让-vim-嵌入你的开发工具-01-42"><a href="#5-2-无处不在的-vim，让-vim-嵌入你的开发工具-01-42" class="headerlink" title="5-2 无处不在的 vim，让 vim 嵌入你的开发工具 (01:42)"></a>5-2 无处不在的 vim，让 vim 嵌入你的开发工具 (01:42)</h3><p>几乎流行的编辑器和IDE都支持VIM插件</p><blockquote><p>让vim嵌入开发工具，甚至Chrome都有vimium插件</p></blockquote><ul><li>即使不用vim作为主力编辑器，依然可以使用它的编辑方式</li><li>几乎流行的开发工具都支持vim插件，以vim的方式编辑</li><li>比如VSCode/Atom/PyCharm等都支持安装vim插件</li></ul><p>课后练习</p><ul><li>搜索相应开发工具的vim插件</li><li>安装vim插件到开发工具里</li><li>尝试在各种开发工具中使用vim的方式编辑提升效率</li></ul><h3 id="5-3-与时俱进的-vim-之-neovim-02-07"><a href="#5-3-与时俱进的-vim-之-neovim-02-07" class="headerlink" title="5-3 与时俱进的 vim 之 neovim (02:07)"></a>5-3 与时俱进的 vim 之 neovim (02:07)</h3><p>Neovim</p><blockquote><p>一个新的vim版本，支持异步特性（vim8也支持）</p></blockquote><ul><li><a href="https://neovim.io/" target="_blank" rel="noopener">https://neovim.io/</a></li><li><a href="https://github.com/neovim/neovim" target="_blank" rel="noopener">https://github.com/neovim/neovim</a></li><li>开发更活跃，更丰富的特性和扩展异步支持</li><li>neovim的设计可以嵌入到很多GUI里，加上好看的外壳</li></ul><p>感兴趣的同学可以使用neovim代替vim啦！</p><h3 id="5-4-站在巨人的肩膀上，使用强大的开源配置-03-37"><a href="#5-4-站在巨人的肩膀上，使用强大的开源配置-03-37" class="headerlink" title="5-4 站在巨人的肩膀上，使用强大的开源配置 (03:37)"></a>5-4 站在巨人的肩膀上，使用强大的开源配置 (03:37)</h3><p>开箱即用</p><blockquote><p>如果你已经熟悉了vim配置，可以从网上直接使用一些开源配置</p></blockquote><ul><li><a href="https://github.com/SpaceVim/SpaceVim" target="_blank" rel="noopener">https://github.com/SpaceVim/SpaceVim</a></li><li><a href="https://github.com/pegasuswang/vim-config" target="_blank" rel="noopener">https://github.com/pegasuswang/vim-config</a></li><li>其他开源配置。不推荐新手直接使用，越复杂的配置上手成本越高</li></ul><p>课后练习</p><ul><li>找到一个合适的开源配置，尝试安装它</li><li>阅读其他文档，了解使用方式。一般开源配置都安装了很多插件</li><li>对于新手来说，配置太复杂太强大有时候可能会出现很多小问题</li></ul><h2 id="第6章-Vim虐我千百遍，我待Vim如初恋"><a href="#第6章-Vim虐我千百遍，我待Vim如初恋" class="headerlink" title="第6章 Vim虐我千百遍，我待Vim如初恋~"></a>第6章 Vim虐我千百遍，我待Vim如初恋~</h2><blockquote><p>Vim虐我千百遍，我待Vim如初恋~</p></blockquote><h3 id="6-1-课程总结-vim虐我千百遍，我待-vim-如初恋-03-17"><a href="#6-1-课程总结-vim虐我千百遍，我待-vim-如初恋-03-17" class="headerlink" title="6-1 课程总结-vim虐我千百遍，我待 vim 如初恋 (03:17)"></a>6-1 课程总结-vim虐我千百遍，我待 vim 如初恋 (03:17)</h3><p>可以用一生的编辑器</p><blockquote><p>vim从诞生到现在已经走过了快30个年头</p></blockquote><ul><li>几十年之间，无数的编辑器或者开发工具昙花一现</li><li>但是vim一直到现在依然有很多人在使用，甚至嵌入到各种开发工具</li><li>如今vim/neovim依然在活跃开发，很多开发者贡献插件</li></ul><p>学习方法</p><blockquote><p>熟悉vim靠的是肌肉记忆。脱离鼠标编辑能提升编辑效率</p></blockquote><ul><li>讲了很多，但是vim中依然有很多东西没有讲到，时不时发现一些使用技巧</li><li>在学中练，在练中学。熟能生巧，肌肉记忆</li><li>衡量投入产出比，是点到为止还是继续深入</li></ul><p>继续练级</p><blockquote><p>网络上有很多vim的资源，甚至练习的小游戏</p></blockquote><ul><li>《Practical vim》、中文版《Vim实用技巧》</li><li>《笨方法学vimscript》</li><li>学习和开发自己的插件</li></ul><h2 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h2><pre><code class="shell">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;                                 Sample vimrc                                 &quot;&quot;                                                                              &quot;&quot;                                 Provided by:                                 &quot;&quot;                                     Tuyk                                     &quot;&quot;                                                                              &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;syntax on &quot; 自动语法高亮&quot; colorscheme xcode-default &quot; 更换主题配色&quot; ======================...Basic Start...====================== &quot;&quot; Turn on line numbering &quot; 显示行号set number&quot; Save 1,000 items in history &quot; 设置历史行号set history=1000&quot; Show the line and column number of the cursor position &quot; 设置光标的位置值set ruler&quot; Display the incomplete commands in the bottom right-hand side of your screen.  set showcmd&quot; Display completion matches on your status lineset wildmenu&quot; Show a few lines of context around the cursorset scrolloff=5&quot; Highlight search matches &quot; 设置查找的值高亮显示set hlsearch&quot; Enable incremental searching &quot; 设置边搜索边高亮set incsearch&quot; Ignore case when searching &quot; 设置忽略查找选项的大小写set ignorecase&quot; Override the &#39;ignorecase&#39; option if the search pattern contains upper case characters.set smartcase&quot; Turn on file backupsset backup&quot; Don&#39;t line wrap mid-word.set lbr&quot; Copy the indentation from the current line. &quot; 设置自动复制上一行的缩进到下一行set autoindent&quot; Enable smart autoindenting. &quot; 设置自动识别“{}”缩进，写代码非常有用set smartindent&quot; Use spaces instead of tabs &quot; 使用空格替换tabset expandtab&quot; Enable smart tabsset smarttab&quot; Make a tab equal to 4 spacesset shiftwidth=4 &quot; 默认缩进4个空格set tabstop=4 &quot; tab 代表4个空格set softtabstop=4 &quot; 使用tab时 tab空格数&quot; 按F2进入粘贴模式set pastetoggle=&lt;F2&gt;&quot; 设置折叠方式&quot; set foldmethod=indent&quot; 开启系统剪贴板set clipboard=unnamed&quot; 解决中文乱码set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8&quot; Tell vim what background you are using &quot; 设置背景颜色&quot; set bg=light&quot; set bg=dark&quot; 退格删除键不能用set backspace=indent,eol,start&quot; ======================...Basic End...====================== &quot;&quot; ======================...Mapping Start...====================== &quot;&quot; Map Y to act like D and C, i.e. yank until EOL, rather than act like yy &quot; Map 映射&quot; map Y y$&quot; Remap VIM 0 to first non-blank character&quot; map 0 ^noremap &lt;space&gt; viw&quot; change the mapleader from \ to , &quot; 一些方便的映射&quot; NOTE: This has to be set before &lt;leader&gt; is used.let mapleader=&#39;,&#39;let g:mapleader=&#39;,&#39;&quot; 使用 jj 进入 normal模式inoremap jj &lt;Esc&gt;`^&quot; 使用 &lt;leader&gt;+w 直接保存inoremap &lt;leader&gt;w &lt;Esc&gt;:w!&lt;cr&gt;noremap &lt;leader&gt;w :w!&lt;cr&gt;&quot; 切换 buffernnoremap &lt;silent&gt; [p :bprevious&lt;cr&gt;nnoremap &lt;silent&gt; [n :bnext&lt;cr&gt;&quot; use ctrl+h/j/k/l switch windownoremap &lt;C-h&gt; &lt;C-w&gt;hnoremap &lt;C-j&gt; &lt;C-w&gt;jnoremap &lt;C-k&gt; &lt;C-w&gt;knoremap &lt;C-l&gt; &lt;C-w&gt;l&quot; Sudo to writecnoremap w!! w !sudo tee % &gt;/dev/null&quot; NERDTreemap &lt;leader&gt;v :NERDTreeFind&lt;CR&gt;map &lt;leader&gt;g :NERDTreeToggle&lt;CR&gt;&quot; ctrlp.vimlet g:ctrlp_map = &#39;&lt;c-p&gt;&#39;&quot; vim-easymotionnmap ss &lt;Plug&gt;(easymotion-s2)&quot; vim-goautocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4&quot; python-modelet g:pymode_python = &#39;python3&#39;let g:pymode_trim_whitespaces = 1let g:pymode_doc = 1let g:pymode_doc_bind = &#39;K&#39;let g:pymode_rope_goto_definition_bind = &#39;&lt;C-]&gt;&#39;let g:pymode_lint = 1let g:pymode_lint_checkers = [&#39;pyflakes&#39;, &#39;pep8&#39;, &#39;mccabe&#39;, &#39;pylint&#39;]let g:pymode_options_max_line_length = 120&quot; tagbarnnoremap &lt;leader&gt;t :TagbarToggle&lt;CR&gt;&quot; deoplete.nvimlet g:deoplete#enable_at_startup = 1set completeopt -=preview &quot; 关闭预览窗口&quot; vim-gitgutterset updatetime =100&quot; ======================...Mapping End...====================== &quot;&quot; ============================================================================== &quot;&quot; json 格式化com! FormatJSON %!python3 -m json.tool&quot; ============================================================================== &quot;&quot; ======================...Plugins Start...====================== &quot;&quot; 插件设置，这里使用了 vim-plugcall plug#begin(&#39;~/.vim/plugged&#39;)&quot; 安装插件只需要把 github 地址放到这里重启后执行 :PlugInstall 就好了Plug &#39;mhinz/vim-startify&#39;Plug &#39;vim-airline/vim-airline&#39;Plug &#39;vim-airline/vim-airline-themes&#39;Plug &#39;Yggdroot/indentLine&#39;Plug &#39;scrooloose/nerdtree&#39;Plug &#39;ctrlpvim/ctrlp.vim&#39;Plug &#39;easymotion/vim-easymotion&#39;Plug &#39;tpope/vim-surround&#39;Plug &#39;junegunn/fzf&#39;, { &#39;dir&#39;: &#39;~/.fzf&#39;, &#39;do&#39;: &#39;./install --all&#39; }Plug &#39;junegunn/fzf.vim&#39;Plug &#39;ggreer/the_silver_searcher&#39;Plug &#39;brooth/far.vim&#39;Plug &#39;fatih/vim-go&#39;, { &#39;do&#39;: &#39;:GoUpdateBinaries&#39; }Plug &#39;python-mode/python-mode&#39;, { &#39;for&#39;: &#39;python&#39;, &#39;branch&#39;: &#39;develop&#39; }Plug &#39;majutsushi/tagbar&#39;Plug &#39;lfv89/vim-interestingwords&#39;if has(&#39;nvim&#39;)  Plug &#39;Shougo/deoplete.nvim&#39;, { &#39;do&#39;: &#39;:UpdateRemotePlugins&#39; }else  Plug &#39;Shougo/deoplete.nvim&#39;  Plug &#39;roxma/nvim-yarp&#39;  Plug &#39;roxma/vim-hug-neovim-rpc&#39;endifPlug &#39;neoclide/coc.nvim&#39;, {&#39;branch&#39;: &#39;release&#39;}Plug &#39;sbdchd/neoformat&#39;Plug &#39;dense-analysis/ale&#39;Plug &#39;tpope/vim-commentary&#39;Plug &#39;tpope/vim-fugitive&#39;Plug &#39;airblade/vim-gitgutter&#39;Plug &#39;junegunn/gv.vim&#39;call plug#end()&quot; 插件相关配置&quot; 禁止 stratify 自动切换目录let g:startify_change_to_dir = 0&quot; 启动时自动打开NERDTree&quot; autocmd vimenter * NERDTree&quot; ======================...Plugins End...====================== &quot;&quot; ======================...Function Start...====================== &quot;&quot; 定义函数SetTitle，自动插入文件头func SetTitle()    if &amp;filetype == &#39;python&#39;        call setline(1, &quot;\#!/usr/bin/env python&quot;)        call setline(2, &quot;\# -*- coding:utf-8 -*-&quot;)        normal G        normal o        normal o        call setline(5, &quot;if __name__ == &#39;__main__&#39;:&quot;)        call setline(6, &quot;    pass&quot;)    endifendfunc&quot; ======================...Function End...====================== &quot;&quot; For more options see &quot;:help option-list&quot; and &quot;:options&quot;.</code></pre>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1049-优雅玩转Vim</title>
      <link href="/2019/11/04/1049-vim/"/>
      <url>/2019/11/04/1049-vim/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/1049" target="_blank" rel="noopener">https://www.imooc.com/learn/1049</a></p><p>简介：Vim作为Linux 平台首选编辑器，无论是运维还是开发等IT人员都应该系统地学习下这款优秀经典的上古神器。本课程系统提炼vim 的精华、通过抛砖引玉把它展现到你的面前，更能让你的工作如虎添翼、事半功倍。</p></blockquote><p>@[TOC]</p><h2 id="第1章-课程介绍"><a href="#第1章-课程介绍" class="headerlink" title="第1章 课程介绍"></a>第1章 课程介绍</h2><blockquote><p>Vim课程介绍。</p></blockquote><h3 id="1-1-课程简介-04-34"><a href="#1-1-课程简介-04-34" class="headerlink" title="1-1 课程简介 (04:34)"></a>1-1 课程简介 (04:34)</h3><p>在所有的类Unix操作系统中都会默认内置Vi/Vim文本编辑器</p><ol><li><p>Vim简介</p><ul><li>Vim和Vi的区别</li><li>Vimrc配置</li><li>Vim四种模式</li></ul></li><li><p>基础入门</p><ul><li>Vim寄存器（类似于Windows的粘贴板）</li><li>增查删改等常规操作（快捷键、按键）</li><li>Vim组合规律</li></ul></li><li><p>高级功能</p><ul><li>缓冲区与多文件编辑</li><li>多窗口与标签分组</li><li>文本对象和宏</li><li>Visual模式</li></ul></li></ol><h2 id="第2章-Vim简介"><a href="#第2章-Vim简介" class="headerlink" title="第2章 Vim简介"></a>第2章 Vim简介</h2><blockquote><p>为什么选择Vim作为编辑器，Vim安装与简洁Vimrc配置</p></blockquote><h3 id="2-1-vim介绍及Vimrc-18-02"><a href="#2-1-vim介绍及Vimrc-18-02" class="headerlink" title="2-1 vim介绍及Vimrc (18:02)"></a>2-1 vim介绍及Vimrc (18:02)</h3><p>Vim介绍：</p><ul><li>Vim是一个Unix以及类Unix文本编辑器</li><li>特点：功能强大、高度可定制(Vimrc、插件等)</li></ul><p>Vim、VS、Vi：</p><blockquote><p>Vim = Vi + IMproved</p></blockquote><ul><li>多级撤销</li><li>语法加亮和自动补全</li><li>支持多种插件</li><li>通过网络协议（HTTP/SSH）编辑文件</li><li>多文件编辑</li><li>Vim可以编辑压缩格式文件（gzip、zip等）</li></ul><p>Vimrc概述：</p><ul><li>rc = run command</li><li>系统级vimrc和用户级vimrc</li><li>每一行作为一个命令执行</li></ul><p>Vimrc使用：</p><blockquote><p>默认.Vimrc是没有得。需要用户自己手动创建。Vim 会自动搜索到。</p></blockquote><ul><li><p><code>:h vimrc</code> 查看Vimrc文档</p></li><li><p><code>:version</code> 查看vim版本</p></li><li><p><code>vim &lt;filename&gt;</code> 或 <code>:e &lt;filename&gt;</code> 打开文件📃</p></li><li><p><code>“</code> 注释</p></li><li><p>Vimrc-Sample：<a href="https://raw.githubusercontent.com/yangvipguang/vimrc-sample/master/vimrc-sample" target="_blank" rel="noopener">https://raw.githubusercontent.com/yangvipguang/vimrc-sample/master/vimrc-sample</a></p></li></ul><pre><code class="shell">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;                                 Sample vimrc                                 &quot;&quot;                                                                              &quot;&quot;                                 Provided by:                                 &quot;&quot;                                     Tuyk                                     &quot;&quot;                                                                              &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;syntax on &quot; 自动语法高亮&quot; Save 1,000 items in history &quot; 设置历史行号set history=1000&quot; Show the line and column number of the cursor position &quot; 设置光标的位置值set ruler&quot; Display the incomplete commands in the bottom right-hand side of your screen.  set showcmd&quot; Display completion matches on your status lineset wildmenu&quot; Show a few lines of context around the cursorset scrolloff=5&quot; Highlight search matches &quot; 设置查找的值高亮显示set hlsearch&quot; Enable incremental searching &quot; 设置边搜索边高亮set incsearch&quot; Ignore case when searching &quot; 设置忽略查找选项的大小写set ignorecase&quot; Override the &#39;ignorecase&#39; option if the search pattern contains upper case characters.set smartcase&quot; Turn on line numbering &quot; 显示行号set number&quot; Turn on file backupsset backup&quot; Don&#39;t line wrap mid-word.set lbr&quot; Copy the indentation from the current line. &quot; 设置自动复制上一行的缩进到下一行set autoindent&quot; Enable smart autoindenting. &quot; 设置自动识别“{}”缩进，写代码非常有用set smartindent&quot; Use spaces instead of tabs &quot; 使用空格替换tabset expandtab&quot; Enable smart tabsset smarttab&quot; Make a tab equal to 4 spacesset shiftwidth=4 &quot; 默认缩进4个空格set tabstop=4 &quot; tab 代表4个空格set softtabstop=4 &quot; 使用tab时 tab空格数&quot; Specifiy a color scheme.colorscheme slate&quot; Tell vim what background you are using &quot; 设置背景颜色&quot; set bg=light&quot; set bg=dark&quot; Map Y to act like D and C, i.e. yank until EOL, rather than act like yy &quot; Map 映射&quot; map Y y$&quot; Remap VIM 0 to first non-blank character&quot; map 0 ^&quot; Easily create HTML unorded lists. &quot; map &lt;F3&gt; i&lt;ul&gt;&lt;CR&gt;&lt;Space&gt;&lt;Space&gt;&lt;li&gt;&lt;/li&gt;&lt;CR&gt;&lt;Esc&gt;I&lt;/ul&gt;&lt;Esc&gt;kcit&quot; map &lt;F4&gt; &lt;Esc&gt;o&lt;li&gt;&lt;/li&gt;&lt;Esc&gt;cit&quot; change the mapleader from \ to ,&quot; NOTE: This has to be set before &lt;leader&gt; is used.&quot; let mapleader=&quot;,&quot;&quot; Quickly save your file.&quot; map &lt;leader&gt;w :w!&lt;cr&gt;&quot; For more options see &quot;:help option-list&quot; and &quot;:options&quot;.</code></pre><h3 id="2-2-vim的四种模式-05-22"><a href="#2-2-vim的四种模式-05-22" class="headerlink" title="2-2 vim的四种模式 (05:22)"></a>2-2 vim的四种模式 (05:22)</h3><ol><li>普通模式<ul><li>打开的默认模式</li><li>移查删改</li></ul></li><li>可视化模式<ul><li>对一块区域操作</li></ul></li><li>插入模式<ul><li>添加文本</li></ul></li><li>命令模式<ul><li>和普通模式类似</li></ul></li></ol><p><code>v</code>：进入可视化模式</p><p><code>i</code>：进入插入模式</p><p><code>:</code>：使用命令模式</p><p><code>dd</code>：删除</p><p><code>Esc</code>：返回普通模式</p><p><code>:h vim-modes-intro</code>：查看vim模式文档（7种）</p><h2 id="第3章-Vim基础入门"><a href="#第3章-Vim基础入门" class="headerlink" title="第3章 Vim基础入门"></a>第3章 Vim基础入门</h2><blockquote><p>本章主要讲解移动、跳转与缩进，删除、复制与粘贴，修改、查找与替换相关内容。</p></blockquote><h3 id="3-1-移动、跳转与缩进-07-55"><a href="#3-1-移动、跳转与缩进-07-55" class="headerlink" title="3-1 移动、跳转与缩进 (07:55)"></a>3-1 移动、跳转与缩进 (07:55)</h3><p>Vim布局起源</p><ul><li><p>Vim最初的作者Bill Joy使用的机器ADM-3A终端机</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ghbdnjipj31bs0fmgod.jpg" alt="ADM-3A终端机" style="zoom:30%;" /><p>注意看上下左右键的位置</p></li></ul><p><strong>光标移动：</strong></p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>h</code></td><td>左移</td></tr><tr><td><code>l</code></td><td>右移</td></tr><tr><td><code>j</code></td><td>下移</td></tr><tr><td><code>k</code></td><td>上移</td></tr><tr><td><code>shift+6</code>/<code>0</code></td><td>移动到行首<code>^</code>/包含缩进空格</td></tr><tr><td><code>shift+4</code></td><td>移动到行尾<code>$</code></td></tr></tbody></table><p><strong>单词和字符移动：</strong></p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>w/W</td><td>正向移动到下一个单词开头(小写识别特殊字符)</td></tr><tr><td>e/E</td><td>正向移动到下一个单词结尾</td></tr><tr><td>b/B</td><td>反向移动到上一个单词开头</td></tr><tr><td>ge</td><td>反向移动到上一个单词结尾</td></tr></tbody></table><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ghbf4b5oj30ja0asmxt.jpg" alt="单词和字符移动" style="zoom:50%;" /><p><strong>跳转：</strong></p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>control+b/B</code></td><td>上一页</td></tr><tr><td><code>control+f/F</code></td><td>下一页</td></tr><tr><td><code>control+u/d</code></td><td>向上/下翻半页</td></tr><tr><td><code>gg</code></td><td>跳转到文件📁首行</td></tr><tr><td><code>G</code></td><td>跳转到文件📁尾行</td></tr><tr><td><code>&lt;line_number&gt;gg/G</code></td><td>跳转到指定行</td></tr><tr><td><code>{g}+control+g/G</code></td><td>查看文件信息/{g}更加详细</td></tr></tbody></table><p><strong>缩进：</strong></p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td><code>&gt;&gt;</code>===<code>:&gt;</code></td><td>右缩进(普通模式)</td></tr><tr><td><code>&lt;&lt;</code>===<code>:&lt;</code></td><td>左缩进(普通模式)</td></tr><tr><td><code>:m,n&gt;</code>===<code>:m&gt;(n-m+1)</code></td><td>m到n行缩进(命令行模式)</td></tr><tr><td><code>:m&gt;n</code>===<code>:m,m+n-1&gt;</code></td><td>m行开始,共n行缩进一次(命令行模式)</td></tr></tbody></table><h3 id="3-2-删除、复制与粘贴-25-41"><a href="#3-2-删除、复制与粘贴-25-41" class="headerlink" title="3-2 删除、复制与粘贴 (25:41)"></a>3-2 删除、复制与粘贴 (25:41)</h3><table><thead><tr><th>Windows</th><th>Vim</th><th>不同处</th></tr></thead><tbody><tr><td>cut</td><td>delete</td><td>和剪切相同，而不是直接删除</td></tr><tr><td>copy</td><td>yank</td><td>等同于复制,由于c用于(change)被迫选了yank</td></tr><tr><td>paste</td><td>put</td><td>粘贴完全相同</td></tr></tbody></table><p>Vim特性</p><ul><li><p>寄存器（保存临时数据）</p><table><thead><tr><th align="left">类型</th><th align="center">含义</th><th>表示方式</th><th>举例</th><th>特点</th></tr></thead><tbody><tr><td align="left">无名寄存器</td><td align="center">默认寄存器</td><td>“”</td><td>“” p=p</td><td>会被最后一条覆盖</td></tr><tr><td align="left">数字寄存器</td><td align="center">“+{0-9}缓存最近10次操作</td><td>“0”{1-9}</td><td>“0P<br />“1P</td><td>0用于复制专用<br />1-9用于最近9次行删除或者修改记录</td></tr><tr><td align="left">有名寄存器</td><td align="center">26英文字母命名有名寄存器</td><td>“[a-z]/[A-Z]”</td><td>“ayw</td><td>“A会通过^J追加到”a寄存器中</td></tr><tr><td align="left">黑洞寄存器</td><td align="center">有去无回</td><td>“-</td><td>“_dw</td><td>只想删除而不想覆盖无名寄存器</td></tr></tbody></table><p><code>:register</code>/<code>:reg</code>：进入寄存器</p><p><code>:h reg</code>：查看寄存器文档</p></li></ul><p>基础操作</p><table><thead><tr><th>按键操作</th><th>定义</th></tr></thead><tbody><tr><td>d = delete = cut</td><td>剪切</td></tr><tr><td>y = yank ≈ copy</td><td>类似于复制</td></tr><tr><td>P/p = put ≈ paste</td><td>粘贴到光标后/前</td></tr><tr><td>u = undo</td><td>撤销之前操作</td></tr><tr><td>Control+r = redo</td><td>重做/恢复之前操作(反撤销)</td></tr></tbody></table><p><code>yy</code>：复制整行。记录到<code>&quot;&quot;</code>默认寄存器/无名寄存器、<code>&quot;0</code>寄存器/复制专用寄存器</p><p><code>dd</code>：剪切整行。记录到<code>&quot;&quot;</code>默认寄存器/无名寄存器、<code>&quot;1</code>寄存器/剪切寄存器</p><p><code>p</code>：粘贴</p><p><code>u</code>：撤销</p><p><code>Control+r</code>：重做(反撤销)</p><p><code>&quot;ayy</code>：复制整行到<code>&quot;a</code>寄存器。记录到默认寄存器，不会记录到复制专用寄存器</p><p><code>&quot;_dd</code>：删除整行。不会记录到任何寄存器。黑洞寄存器</p><table><thead><tr><th>按键操作</th><th>定义</th></tr></thead><tbody><tr><td>yw</td><td>复制当前光标单词(从光标后开始截取)</td></tr><tr><td>y2w</td><td>复制正向倆个单词(从光标后开始截取)</td></tr></tbody></table><p>调换字符</p><table><thead><tr><th>按键操作</th><th>缓冲区内容</th></tr></thead><tbody><tr><td>{start}</td><td>Practical vim</td></tr><tr><td>F{space}</td><td>Practical vim</td></tr><tr><td>x</td><td>Practical vim</td></tr><tr><td>p</td><td>Practical vim</td></tr></tbody></table><p><code>x</code>：剪切单个字符。记录到默认寄存器、<code>-</code>寄存器</p><p>行剪切粘贴</p><table><thead><tr><th>按键操作</th><th>缓冲区内容</th></tr></thead><tbody><tr><td>{start}</td><td>Line1   Line2</td></tr><tr><td>dd</td><td>Line2</td></tr><tr><td>p</td><td>Line2   Line1</td></tr></tbody></table><p>行复制</p><table><thead><tr><th>按键操作</th><th>缓冲区内容</th></tr></thead><tbody><tr><td>{start}</td><td>Line1   Line2</td></tr><tr><td>yy</td><td>Line1   Line2</td></tr><tr><td>p</td><td>Line1   Line2   Line1</td></tr></tbody></table><p>组合删除([count] operation [count] {motion})</p><table><thead><tr><th>操作按键</th><th>定义</th></tr></thead><tbody><tr><td><code>x</code>/<code>X</code></td><td>删除光标下/前单个字符</td></tr><tr><td><code>dw</code>(d = delete,w = word)</td><td>删除一个单词(必须在词首👋)(删除光标处到单词末尾🔚)</td></tr><tr><td><code>d{hjkl}</code></td><td>删除到上下左右一个操作前的字符</td></tr><tr><td><code>d$</code>===<code>D</code></td><td>删除光标到行尾的字符</td></tr><tr><td><code>d^</code></td><td>删除光标到行首的字符</td></tr><tr><td><code>dd</code></td><td>删除当前整行</td></tr><tr><td><code>{n}dd</code></td><td>向下删除n行（包括当前行）</td></tr><tr><td><code>5dw</code></td><td>删除正向单词5次</td></tr><tr><td><code>d3w</code></td><td>正向删除3w 动作</td></tr><tr><td><code>3w</code></td><td>正向移动单词3次</td></tr><tr><td><code>2d3w</code></td><td>正向删除3w 动作 2次</td></tr></tbody></table><h3 id="3-3-修改、查找与替换-15-59"><a href="#3-3-修改、查找与替换-15-59" class="headerlink" title="3-3 修改、查找与替换 (15:59)"></a>3-3 修改、查找与替换 (15:59)</h3><p>插入</p><table><thead><tr><th>按键操作</th><th>定义</th></tr></thead><tbody><tr><td><code>Shift+i</code>/<code>Shift+a</code></td><td>插入模式并移动到行首/尾</td></tr><tr><td><code>i</code>/<code>a</code></td><td>光标前/后插入</td></tr><tr><td>[n]+<code>O</code>/<code>o</code></td><td>行前/后插入n次</td></tr><tr><td>[n]+<code>i</code></td><td>插入模式重复n次</td></tr></tbody></table><p>转换</p><table><thead><tr><th>按键操作</th><th>定义</th></tr></thead><tbody><tr><td><code>~</code></td><td>单个字符大小写转换</td></tr><tr><td><code>g ~ w</code></td><td>单词大小写转换</td></tr><tr><td><code>g ~ $</code>/<code>g ~ ~</code></td><td>整行大小写转换(<code>^</code>光标处到行首大小写反转,<code>$</code>光标处到行尾大小写反转)</td></tr><tr><td><code>gUw</code>/<code>guw</code></td><td>单词转换成大小写</td></tr></tbody></table><p><code>.</code>：对上一个操作的重🐛复</p><p>查找</p><table><thead><tr><th>按键操作</th><th>定义</th></tr></thead><tbody><tr><td><code>f{char}</code>/<code>F{char}</code></td><td>正向/反向查找某个单词(适用于查找某一行)</td></tr><tr><td><code>t{char}</code></td><td>查找字符前一个字符</td></tr><tr><td><code>dt{char}</code>/<code>df{char}</code></td><td>删除光标到查找字符间的字符</td></tr><tr><td><code>/{char}</code></td><td>命令行查找</td></tr></tbody></table><p><code>/{char}</code>：</p><ul><li><code>n</code>：向下⬇️查找🔎</li><li><code>N</code>：向上⬆️查找🔎</li></ul><p>替换(substitute)</p><p>语法：<code>[range]s[ubstitute]/{pattern}/{string}/[flags]</code></p><table><thead><tr><th>按键操作</th><th>定义</th></tr></thead><tbody><tr><td><code>:s/going/rolling/g</code></td><td>当前行所有going替换成rolling</td></tr><tr><td><code>:%s/going/rolling/g</code></td><td>%匹配所有范围</td></tr><tr><td><code>⇧+r</code>/<code>R</code></td><td>替换模式</td></tr><tr><td><code>r</code></td><td>单个字符替换</td></tr><tr><td><code>cw</code>、<code>c2w</code></td><td>修改单个单词</td></tr><tr><td><code>c$</code>/<code>C</code>类似于<code>d</code>操作符</td><td>修改光标之后行内内容</td></tr></tbody></table><h2 id="第4章-Vim高级功能"><a href="#第4章-Vim高级功能" class="headerlink" title="第4章 Vim高级功能"></a>第4章 Vim高级功能</h2><blockquote><p>本章主要讲解缓冲区与多文件编辑、多窗口操作（分屏）与标签分组、宏和文本对象以及Visual模式。</p></blockquote><h3 id="4-1-缓冲区与多文件编辑-13-25"><a href="#4-1-缓冲区与多文件编辑-13-25" class="headerlink" title="4-1 缓冲区与多文件编辑 (13:25)"></a>4-1 缓冲区与多文件编辑 (13:25)</h3><blockquote><p>缓冲区、标签、窗口</p></blockquote><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ghbe71ptj31340hcmyi.jpg" alt="缓冲区与多文件编辑" style="zoom:45%;" /><p>编辑操作并不是真正的编辑文件，而是编辑文件在内存中的映射或快照或缓冲区</p><p>缓冲区：就是内容缓存区域。</p><ul><li>Buffer是内存中的一块缓冲区，用于临时存放Vim打开过的文件</li></ul><p>查看缓冲区列表：</p><ul><li><code>:files</code></li><li><code>:buffers</code></li><li><code>:ls</code><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8ghbeqzfdj31kg0cwgoo.jpg" alt="缓冲区列表" style="zoom:30%;" /></li></ul><p>缓冲区列表指示状态</p><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>激活缓冲区，缓冲区被加载且显示</td></tr><tr><td>h</td><td>隐藏缓冲区，缓冲区被加载但🥚不显示</td></tr><tr><td>%</td><td>当前缓冲区</td></tr><tr><td>#</td><td>交换缓冲区</td></tr><tr><td>=</td><td>只读缓冲区</td></tr><tr><td>+</td><td>已经更改缓冲区</td></tr><tr><td>-</td><td>不可更改缓冲区，’modifiable’选项不置位</td></tr></tbody></table><p>缓冲区列表操作</p><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td><code>:bp[revious]</code></td><td>上一个缓冲区</td></tr><tr><td><code>:bn[ext]</code></td><td>下一个缓冲区</td></tr><tr><td><code>:bf[irst]</code></td><td>到第一个缓冲区</td></tr><tr><td><code>:bl[ast]</code></td><td>到最后一个缓冲区</td></tr><tr><td><code>:buffer Number/File_name</code></td><td>指定缓冲区</td></tr><tr><td><code>:ball</code></td><td>编辑所有缓冲区</td></tr><tr><td><code>⌃+^</code>/<code>b#</code></td><td>切换到前一个buffer（交换buffer）</td></tr><tr><td><code>:qall!</code></td><td>退出全部缓冲区</td></tr><tr><td><code>:wall!</code></td><td>写入全部缓冲区</td></tr><tr><td><code>:badd</code></td><td>添加一个新缓冲区，但不设置为当前缓冲区</td></tr><tr><td><code>:bd[elete]</code></td><td>删除缓冲区</td></tr><tr><td><code>:m,nbd</code>/<code>:%db</code></td><td>删除m到n编号/所有的缓冲区文件</td></tr><tr><td><code>:bufdo {CMD}</code></td><td>bufdo set number</td></tr><tr><td><code>:E /:bd</code></td><td>打开文件目录列表/返回到🔙最初的buffer</td></tr></tbody></table><h3 id="4-2-多窗口操作与标签分组-16-57"><a href="#4-2-多窗口操作与标签分组-16-57" class="headerlink" title="4-2 多窗口操作与标签分组 (16:57)"></a>4-2 多窗口操作与标签分组 (16:57)</h3><ul><li>多窗口（分屏）</li></ul><p>分屏操作</p><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td><code>vim -On</code>/<code>vim -on</code></td><td>垂直/水平分屏（n：数字，o：Open）</td></tr><tr><td><code>⌃+w c/q</code></td><td>关闭当前窗口/最后一个窗口时退</td></tr><tr><td><code>⌃+w s</code></td><td>上下分割当前打开的文件</td></tr><tr><td><code>⌃+w v</code></td><td>左右分割当前打开的文件</td></tr><tr><td><code>:sp filename</code></td><td>上下分割并打开一个新的文件</td></tr><tr><td><code>:vsp filename</code></td><td>左右分割并打开一个新的文件</td></tr></tbody></table><p>移动分屏和尺寸变动</p><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td><code>⌃+w H</code></td><td>向左⬅️移动</td></tr><tr><td><code>⌃+w J</code></td><td>向下⬇️移动</td></tr><tr><td><code>⌃+w K</code></td><td>向上⬆️移动</td></tr><tr><td><code>⌃+w L</code></td><td>向右➡️移动</td></tr><tr><td><code>⌃+w +</code></td><td>增加高度</td></tr><tr><td><code>⌃+w -</code></td><td>减少高度</td></tr><tr><td><code>⌃+w _</code></td><td>减小到最低高度</td></tr><tr><td><code>⌃+w =</code></td><td>让所有屏的高度一致</td></tr></tbody></table><ul><li><p>标签</p><p>标签就是容纳一系列窗口的容器</p></li></ul><p>标签操作</p><table><thead><tr><th>指令</th><th><code>含义</code></th></tr></thead><tbody><tr><td><code>:tabnew [tab_name]</code></td><td><code>新建标签页</code></td></tr><tr><td><code>:tabfind</code></td><td><code>查找并在新标签中打开文件</code></td></tr><tr><td><code>:tabs</code></td><td>显示已打开标签页的列表</td></tr><tr><td><code>:tabclose</code></td><td>关闭当前标签页</td></tr><tr><td><code>:tabonly</code></td><td>仅保留当前标签页打开</td></tr><tr><td><code>:tabn/p/first/last</code></td><td>跳转到下/上/第一/最后一个标签页</td></tr><tr><td><code>:tabm</code></td><td>将当前标签页放置到指定位置</td></tr></tbody></table><p>标签操作和命令键</p><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td><code>gt/T</code></td><td>移动到下/上一个标签</td></tr><tr><td><code>{i}gt</code></td><td><strong>跳转到i位置的标签</strong></td></tr><tr><td><code>noremap &lt;C-L&gt; &lt;Esc&gt; :tabnext &lt;CR&gt;</code></td><td>Vimrc中自定义快捷键</td></tr><tr><td><code>noremap &lt;C-H&gt; &lt;Esc&gt; :tabprevious &lt;CR&gt;</code></td><td>Vimrc中自定义快捷键</td></tr><tr><td><code>:tabe</code></td><td>编辑标签中的某个文件</td></tr><tr><td><code>:tabm 0/tabm</code></td><td>移动当前tab到第一个/最后一个</td></tr><tr><td><code>t:abm {i}</code></td><td><strong>移动当前tab到第i+1位置</strong></td></tr></tbody></table><h3 id="4-3-文本对象与宏-18-40"><a href="#4-3-文本对象与宏-18-40" class="headerlink" title="4-3 文本对象与宏 (18:40)"></a>4-3 文本对象与宏 (18:40)</h3><ul><li>文本对象</li></ul><pre><code>{operator} {a} {object}{operator} {i} {object}</code></pre><p>例：</p><ul><li><p>daw = Delete A Word</p><p><code>==a==n object</code>：包含尾部间隔空格</p></li><li><p>ciw = Change Inner Word</p><p><code>==i==nner object</code>：只是内容本身，不包含尾部单词间隔🈳️格</p></li></ul><p>Word/Sentence/Paragraph</p><table><thead><tr><th>textobject</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>word</td></tr><tr><td>s</td><td>sentence</td></tr><tr><td>p</td><td>paragraph</td></tr></tbody></table><p>块对象</p><table><thead><tr><th>textobject</th><th>说明</th></tr></thead><tbody><tr><td>]/[</td><td><code>[]</code> block</td></tr><tr><td>)/(、b</td><td><code>()</code> block</td></tr><tr><td>&gt;/&lt;、&gt;/&lt;</td><td><code>&lt;&gt;</code> block</td></tr><tr><td>}/{、B</td><td><code>()</code> block</td></tr><tr><td>t</td><td>tag block: <code>&lt;&gt; &lt;/&gt;</code></td></tr></tbody></table><p>Visual mode</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>viw</code></td><td>选中单词</td></tr><tr><td><code>vis</code></td><td>选中句子🍊</td></tr><tr><td><code>vip</code></td><td>选中段落</td></tr><tr><td>vi<code>(</code></td><td>选中<code>()</code>圆括号中的内容</td></tr><tr><td><code>vi[</code></td><td>选中<code>[]</code>中括号中的内容</td></tr><tr><td><code>vit</code></td><td>选中标签中的内容</td></tr></tbody></table><table>    <tr>        <th>指令</th>        <th>说明</th>    </tr>    <tr>        <td>v2i{</td>        <td>          选中两层`{}`大括号之间的所有内容<br/>          数字限制选择的嵌套层数        </td>    </tr>    <tr>        <td>v3aw</td>        <td>选择3⃣️个单词（3个单词➕2个间隔空格）</td>    </tr>    <tr>        <td>v3iw</td>        <td>选择3⃣️个单词（2个单词➕1个间隔空格）</td>    </tr>    <tr>        <td colspan="2" align="center">可将v选择操作指令替换为c(change), x, d(delete), y(yank)等操作符(operator)，来针对文本对象操作</td>    </tr>·</table><ul><li>宏</li></ul><blockquote><p>If you write a thing once, it is okay. However if you’re writing twice or more times, then you should find a better way to do it.</p><p>Vim的Micro就是用来解决重复的问题</p></blockquote><p>宏就是批处理，类似于命令行脚本或者编程中的函数</p><p><code>h: operator</code>：查看操作符文档</p><p>简单操作</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>qa</code></td><td>开始录制⏺️宏到寄存器a🀄️</td></tr><tr><td><code>qA</code></td><td>追加宏，在寄存器a🀄️追加</td></tr><tr><td><code>n@a</code></td><td>执行n遍a寄存器中的操作</td></tr><tr><td><code>@@</code></td><td>再执行一遍上一次操作</td></tr><tr><td><code>:n,mnormal @a</code></td><td>n到m行执行寄存器a宏操作</td></tr><tr><td><code>:let @a= &#39;</code></td><td>编辑宏a寄存器</td></tr></tbody></table><p>宏最佳操作</p><ul><li>规范光标位置：0</li><li>执行编辑和操作</li><li>移动光标到容易回放的位置：j</li></ul><p><code>Ctrl+a</code>：当前数字递增1</p><p>示例步骤：</p><ol><li><p>循环递增插入数字</p><pre><code class="shell"># 添加数字1i1Esc# 开始录制宏,此时光标在数字1行qa # 开始yy # 复制p # 粘贴q # 结束# 执行宏操作10@a</code></pre><pre><code></code></pre></li><li><p>为多行添加注释</p><pre><code class="shell"># 开始录制宏,此时光标在需注释行首qb # 开始i # 进入编辑模式`# ` # 添加注释Esc # 退出编辑模式^ # 移动到行首j # 光标下行移动q # 结束</code></pre></li></ol><p>宏保存</p><ul><li><code>viminfo</code>/<code>vimrc file</code></li><li>保存历史和非空寄存器</li><li>vim启动时读取</li><li>容易被覆盖</li></ul><h3 id="4-4-Visual-模式-15-51"><a href="#4-4-Visual-模式-15-51" class="headerlink" title="4-4 Visual 模式 (15:51)"></a>4-4 Visual 模式 (15:51)</h3><blockquote><p>在可视化模式下，可以对一个文本块的整体进行操作</p></blockquote><p>三种子模式</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>v</code></td><td>激活面向字符的可视化模式</td></tr><tr><td><code>V</code>/<code>shift+v</code></td><td>激活面向行的可视化模式</td></tr><tr><td><code>command+v</code></td><td>激活面向列块的可视化模式</td></tr></tbody></table><p>字符可视化模式=&gt;行可视化模式=&gt;块可视化模式</p><p>可视化模式操作</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>gv</td><td>重选上次的高亮选区</td></tr><tr><td>o</td><td>切换选取边界</td></tr></tbody></table><h2 id="第5章-课程总结"><a href="#第5章-课程总结" class="headerlink" title="第5章 课程总结"></a>第5章 课程总结</h2><blockquote><p>课程总结</p></blockquote><h3 id="5-1-课程总结-03-18"><a href="#5-1-课程总结-03-18" class="headerlink" title="5-1 课程总结 (03:18)"></a>5-1 课程总结 (03:18)</h3><ol><li><p>Vim模式（四种）</p><p>普通模式、编辑模式、可视化模式、命令行模式</p></li><li><p>Vim组合 {operation}{motion}</p><p>增查删改</p></li><li><p>Vim配置多样性</p><p>配置文件.vimrc、Vim插件</p></li><li><p>Vim视图多样性</p><p>缓冲区、多文件编辑、多窗口、标签分组</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1052-Git入门</title>
      <link href="/2019/11/01/1052-Git/"/>
      <url>/2019/11/01/1052-Git/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/1052" target="_blank" rel="noopener">https://www.imooc.com/learn/1052</a></p><p>简介：本课程主要通过命令行和图形界面工具来介绍Git的安装、仓库创建、工作流、远程仓库、克隆仓库、标签管理和分支管理等Git的主要内容。</p></blockquote><p>@[TOC]</p><h2 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h2><blockquote><p>主要介绍Git的作用以及安装过程。</p></blockquote><h3 id="1-1-为什么学习git"><a href="#1-1-为什么学习git" class="headerlink" title="1-1 为什么学习git"></a>1-1 为什么学习git</h3><blockquote><p>作者：Linus Torvalds，同时也是Linux的作者。</p><p>版本控制：记录所有文件的所有版本，可以有效地追踪文件的变化。同时很容易回到之前的状态</p></blockquote><p>为什么学习Git：</p><ul><li>牛通的互联网、牛逼的大神们都在用</li><li>完整的版本控制功能，解决多人协作的问题</li><li>提高开发效率</li><li>如果你是程序猿,请务必学Git，井习惯把日己的代码同步到GitHub上</li></ul><p>注：Git不等于 GitHub大家注意了! Git和GitHub就是球和球场的关系!</p><p>课程安排：</p><blockquote><p>Git介绍<br>Git安装（命令行、图形化界面）<br>Git工作流<br>本地与远程仓库<br>分支管理<br>标签管理</p></blockquote><h3 id="1-2-Git安装"><a href="#1-2-Git安装" class="headerlink" title="1-2 Git安装"></a>1-2 Git安装</h3><p>命令行：</p><ul><li><p>下载Window Git</p></li><li><p>Msysgit <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p></li><li><p>配置用户信息</p><pre><code class="shell"># git bashgit config --global user.name &quot;tyk&quot;git config --global user.email &quot;tyk@163.com&quot;</code></pre></li><li><p>查看用户名邮箱是否配置成功</p><pre><code class="shell">git config --list</code></pre></li></ul><p>图形化界面：</p><ul><li>下载安装SourceTree <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a></li><li>注册登录</li></ul><h2 id="第2章-Git仓库创建及工作量"><a href="#第2章-Git仓库创建及工作量" class="headerlink" title="第2章 Git仓库创建及工作量"></a>第2章 Git仓库创建及工作量</h2><blockquote><p>主要介绍Git如何创建仓库以及工作流的内容。</p></blockquote><h3 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2-1 创建仓库"></a>2-1 创建仓库</h3><ul><li><p>初始化版本库</p><pre><code class="shell">git init</code></pre></li><li><p>添加文件到版本库</p><pre><code class="shell">git addgit commit</code></pre></li><li><p>查看仓库状态</p><pre><code class="shell">git status</code></pre></li></ul><p>创建Git仓库：</p><pre><code class="shell">mkdir democd demogit init # 初始化版本库ls -a # 查看所有文件（包含隐藏文件）echo &quot;git repo&quot; &gt;&gt; test.txt # 创建文件并追加输入内容git add test.txt # 添加文件到版本库git commit -m &quot;repo first commit&quot; # 提交文件到本地仓库git status # 查看仓库状态git push -f origin master # 将本地仓库内容同步到远程仓库</code></pre><h3 id="2-2-工作流"><a href="#2-2-工作流" class="headerlink" title="2-2 工作流"></a>2-2 工作流</h3><pre><code class="shell">git add &lt;file&gt;   # 将文件从本地工作区上传到暂存区git commit -m &quot;说明操作内容&quot;  # 将暂存区的文件上传到本地仓库git reset HEAD &lt;file&gt; # 将本地仓库的内容返回到暂存区git checkout -- 文件名 # 清除工作区git log # 查询提交记录的commit号git reset --hard &lt;commit_id&gt; # 将本地仓库和暂存区的内容全部回滚到commit号提交时的内容git rm &lt;file&gt; # 清空文件git rm --cached # 清除工作区里暂存区没有的文件git checkout HEAD &lt;file&gt; # 用最终仓库的文件替换掉暂存区和工作区的</code></pre><p>Git工作流：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gigfvzdzj30pk0bzta6.jpg" width="600" alt="Git工作流"/><h2 id="第3章-Git主要功能"><a href="#第3章-Git主要功能" class="headerlink" title="第3章 Git主要功能"></a>第3章 Git主要功能</h2><blockquote><p>主要介绍Git远程仓库、克隆仓库、标签管理和分支管理的主要内容。</p></blockquote><h3 id="3-1-远程仓库"><a href="#3-1-远程仓库" class="headerlink" title="3-1 远程仓库"></a>3-1 远程仓库</h3><p>创建SSH Key</p><pre><code class="shell">ssh-keygen -t rsa -C &quot;github_registry_mail@github.com&quot;cd .ssh/cat id_rsa.pub</code></pre><p>GitHub设置：</p><p>​    [GitHub首页]-[个人头像]-[Settings]-[SSH and GPG keys]-[New SSH key]</p><p>查看本地是否与Github关联</p><pre><code class="shell">ssh -T git@github.com</code></pre><p>添加远程仓库</p><pre><code class="shell">git remote add origin git@github.com:tuyrk/demo.gitgit pull origin master --allow-unrelated-historiesgit push -u origin master</code></pre><p>在GitHub创建新仓库：</p><p>​    [GitHub首页]-[加号]-[New repository]-[Create repository]</p><p>将本地仓库提交到远程</p><pre><code class="shell">echo &quot;# demo&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin git@github.com:tuyrk/demo.gitgit push -u origin master</code></pre><p>将远程仓库克隆到本地</p><pre><code class="shell">git remote add origin git@github.com:tuyrk/demo.gitgit push -u origin master</code></pre><h3 id="3-2-克隆仓库"><a href="#3-2-克隆仓库" class="headerlink" title="3-2 克隆仓库"></a>3-2 克隆仓库</h3><pre><code class="shell">git clone git@github.com:tuyrk/demo.git # 路径为GitHub中SSH路径</code></pre><p>流程：</p><ol><li>将远程仓库GitHub中的代码克隆一份到本地</li><li>在本地进行开发</li><li>开发完之后将代码推送到远程仓库</li></ol><h3 id="3-3-标签管理"><a href="#3-3-标签管理" class="headerlink" title="3-3 标签管理"></a>3-3 标签管理</h3><pre><code class="shell">git tag # 查看所有标签git tag &lt;name&gt; # 创建标签git tag -a &lt;name&gt; -m &quot;comment&quot; # 指定提交信息git tag -d &lt;name&gt; # 删除标签git push origin &lt;name&gt; # 标签发布git checkout &lt;name&gt; # 切换标签-快照git checkout -b &lt;分支名称&gt; &lt;tag标签名称&gt; # 切换标签-编辑</code></pre><h3 id="3-4-分支管理"><a href="#3-4-分支管理" class="headerlink" title="3-4 分支管理"></a>3-4 分支管理</h3><pre><code class="shell">git branch # 查看所有分支，“*”代表当前所在分支git branch &lt;分支名称&gt; # 创建分支git checkout &lt;分支名称&gt; # 切换分支git merge &lt;分支名称&gt; # 合并到master分支。首先需切换到master分支，然后进行合并git branch -d &lt;分支名称&gt; # 删除分支</code></pre><h2 id="第4章-课程总结"><a href="#第4章-课程总结" class="headerlink" title="第4章 课程总结"></a>第4章 课程总结</h2><blockquote><p>课程总结</p></blockquote><h3 id="4-1-课程总结"><a href="#4-1-课程总结" class="headerlink" title="4-1 课程总结"></a>4-1 课程总结</h3><ul><li><p>介绍与安装</p></li><li><p>工作流</p><p>[工作区]=&gt;[暂存区]=&gt;[版本库]</p></li><li><p>初始化</p><pre><code class="shell">git initgit addgit commit]</code></pre></li><li><p>远程仓库</p><pre><code class="shell">git remote addgit pullgit pushgit clone</code></pre></li><li><p>分支管理</p><pre><code class="shell">git branchgit checkoutgit merge</code></pre></li><li><p>标签管理</p><pre><code class="shell">git taggit push</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>390-版本控制入门 – 搬进 Github</title>
      <link href="/2019/11/01/390-Github/"/>
      <url>/2019/11/01/390-Github/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/390" target="_blank" rel="noopener">https://www.imooc.com/learn/390</a></p><p>简介：版本控制能够大大提高程序员的工作效率，但是通常会涉及到命令行操作，学习曲线陡峭。本课程中使用 Github 网站和图形化客户端来完成版本控制工作，提供一套简单实用的流程，配合图解方式的原理讲解，让大家以最短的时间上手 Git 和 Github 。</p></blockquote><p><a href="https://gitbeijing.com/" target="_blank" rel="noopener">https://gitbeijing.com/</a></p><p>@[TOC]</p><h2 id="第1章-Github课程介绍"><a href="#第1章-Github课程介绍" class="headerlink" title="第1章 Github课程介绍"></a>第1章 Github课程介绍</h2><blockquote><p>阐述本课程的覆盖内容，适合观众。</p></blockquote><h3 id="1-1-课程介绍"><a href="#1-1-课程介绍" class="headerlink" title="1-1 课程介绍"></a>1-1 课程介绍</h3><p>Git和Linux之父，Linus</p><blockquote><p>我是个自负的混蛋，所有我的项目都以我自己的名字命名，先有Linux，现在是Git.<br>–Linus</p></blockquote><p>Global Information Tracker：全局信息跟踪器</p><p>Git：版本控制工具</p><p><a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p><h2 id="第2章-浏览器中使用-Github"><a href="#第2章-浏览器中使用-Github" class="headerlink" title="第2章 浏览器中使用 Github"></a>第2章 浏览器中使用 Github</h2><blockquote><p>不会用 Git，其实也可以直接使用 Github 来进行基本的版本控制操作的。</p></blockquote><h3 id="2-1-浏览器中使用Github"><a href="#2-1-浏览器中使用Github" class="headerlink" title="2-1 浏览器中使用Github"></a>2-1 浏览器中使用Github</h3><h2 id="第3章-Github-客户端的使用"><a href="#第3章-Github-客户端的使用" class="headerlink" title="第3章 Github 客户端的使用"></a>第3章 Github 客户端的使用</h2><blockquote><p>以 Mac 系统的客户端 Github For Mac 为例子来讲解，不过 Windows 系统上也有类似的客户端。</p></blockquote><h3 id="3-1-Github客户端的使用"><a href="#3-1-Github客户端的使用" class="headerlink" title="3-1 Github客户端的使用"></a>3-1 Github客户端的使用</h3><h2 id="第4章-简单分支操作"><a href="#第4章-简单分支操作" class="headerlink" title="第4章 简单分支操作"></a>第4章 简单分支操作</h2><blockquote><p>分支操作几乎是所有的 Git 高级操作的基础，本章来学会使用分支。</p></blockquote><h3 id="4-1-Github-简单分支操作"><a href="#4-1-Github-简单分支操作" class="headerlink" title="4-1 Github-简单分支操作"></a>4-1 Github-简单分支操作</h3><h2 id="第5章-分支合并"><a href="#第5章-分支合并" class="headerlink" title="第5章 分支合并"></a>第5章 分支合并</h2><blockquote><p>分支合并过程其实就是代码融合过程，会涉及到处理代码冲突的问题。</p></blockquote><h3 id="5-1-Github-合并分支（上）"><a href="#5-1-Github-合并分支（上）" class="headerlink" title="5-1 Github-合并分支（上）"></a>5-1 Github-合并分支（上）</h3><h3 id="5-2-Github-合并分支（下）"><a href="#5-2-Github-合并分支（下）" class="headerlink" title="5-2 Github-合并分支（下）"></a>5-2 Github-合并分支（下）</h3><h2 id="第6章-团队协作流程"><a href="#第6章-团队协作流程" class="headerlink" title="第6章 团队协作流程"></a>第6章 团队协作流程</h2><blockquote><p>Github 公司内部使用的工作流程 Github Flow，是 Git 多种协作流程中，最简单也是最流行的一套思路。本章来看看在团队内部如何应用这套流程。</p></blockquote><h3 id="6-1-Github-团队协作流程（上）"><a href="#6-1-Github-团队协作流程（上）" class="headerlink" title="6-1 Github-团队协作流程（上）"></a>6-1 Github-团队协作流程（上）</h3><h3 id="6-2-Github-团队协作流程（下）"><a href="#6-2-Github-团队协作流程（下）" class="headerlink" title="6-2 Github-团队协作流程（下）"></a>6-2 Github-团队协作流程（下）</h3><h2 id="第7章-开源项目贡献流程"><a href="#第7章-开源项目贡献流程" class="headerlink" title="第7章 开源项目贡献流程"></a>第7章 开源项目贡献流程</h2><blockquote><p>开源项目由于贡献者互相不认识，所以流程上必然是区别于团队流程的，但是本质上依然是基于 Pull Request 的 Github Flow。</p></blockquote><h3 id="7-1-开源项目贡献流程"><a href="#7-1-开源项目贡献流程" class="headerlink" title="7-1 开源项目贡献流程"></a>7-1 开源项目贡献流程</h3><h2 id="第8章-Github-Issues"><a href="#第8章-Github-Issues" class="headerlink" title="第8章 Github Issues"></a>第8章 Github Issues</h2><blockquote><p>Issues 相当于项目论坛，集中讨论项目新功能，bug 修复以及任何项目相关的事情。会涉及到 Markdown 使用和多种技巧。</p></blockquote><h3 id="8-1-Github-Issues"><a href="#8-1-Github-Issues" class="headerlink" title="8-1 Github Issues"></a>8-1 Github Issues</h3><h2 id="第9章-Github-Pages-搭建网站"><a href="#第9章-Github-Pages-搭建网站" class="headerlink" title="第9章 Github Pages 搭建网站"></a>第9章 Github Pages 搭建网站</h2><blockquote><p>Github 提供了自己搭建项目网站的一套框架，非常的简单实用。</p></blockquote><h3 id="9-1-Github-Pages-搭建网站"><a href="#9-1-Github-Pages-搭建网站" class="headerlink" title="9-1 Github Pages 搭建网站"></a>9-1 Github Pages 搭建网站</h3><p><a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></p><h2 id="第10章-Github-的秘密机关"><a href="#第10章-Github-的秘密机关" class="headerlink" title="第10章 Github 的秘密机关"></a>第10章 Github 的秘密机关</h2><blockquote><p>为了保证界面的简约美观，Github 的很多功能其实是隐藏的，例如一些非常能够提高工作效率的快捷键。</p></blockquote><h3 id="10-1-Github的秘密机关"><a href="#10-1-Github的秘密机关" class="headerlink" title="10-1 Github的秘密机关"></a>10-1 Github的秘密机关</h3><p>GitHub官网中搜索文件快捷键：T</p><p>GitHub社交化编程</p><p>怎么筛选学习内容？：可以追星</p><h2 id="第11章-Until-Next-Time-Goodbye"><a href="#第11章-Until-Next-Time-Goodbye" class="headerlink" title="第11章 Until Next Time, Goodbye!"></a>第11章 Until Next Time, Goodbye!</h2><blockquote><p>总结和下一步的学习建议。</p></blockquote><h3 id="11-1-Until-Next-Time-Goodbye-01-10"><a href="#11-1-Until-Next-Time-Goodbye-01-10" class="headerlink" title="11-1 Until Next Time, Goodbye! (01:10)"></a>11-1 Until Next Time, Goodbye! (01:10)</h3>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>208-版本管理工具介绍—Git篇</title>
      <link href="/2019/11/01/208-Git/"/>
      <url>/2019/11/01/208-Git/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/208" target="_blank" rel="noopener">https://www.imooc.com/learn/208</a></p><p>简介：本课程主要讲解了git在各平台的安装和基本使用，Git能够帮助我们解决文件的提交、检出、回溯历史、冲突解决、多人协作模式等问题，并且大大提升我们的工作效率。</p></blockquote><p>@[TOC]</p><h2 id="第1章-版本管理工具初探"><a href="#第1章-版本管理工具初探" class="headerlink" title="第1章 版本管理工具初探"></a>第1章 版本管理工具初探</h2><blockquote><p>聊聊版本管理工具是什么，它能为我们做什么。</p></blockquote><h3 id="1-1-版本管理工具简介"><a href="#1-1-版本管理工具简介" class="headerlink" title="1-1 版本管理工具简介"></a>1-1 版本管理工具简介</h3><p>版本管理工具是干什么用的？</p><ul><li>备份文件（类似U盘，网盘）</li><li>记录历史（有各个阶段的代码历史版本）</li><li>回到过去（恢复历史版本）</li><li>多端协作（可以在家工作，也可以在公司）</li><li>团队协作（代码整合，多人共同完成一个项目）</li></ul><h2 id="第2章-工具的历史"><a href="#第2章-工具的历史" class="headerlink" title="第2章 工具的历史"></a>第2章 工具的历史</h2><blockquote><p>聊聊cvs、svn、git、github这些工具的发展历史。</p></blockquote><h3 id="2-1-版本管理工具发展历史"><a href="#2-1-版本管理工具发展历史" class="headerlink" title="2-1 版本管理工具发展历史"></a>2-1 版本管理工具发展历史</h3><ol><li><p>CVS 1985，集中式，始祖（网络环境）</p><p>最早期的版本控制软件，是把文件集中保存到中心服务器</p></li><li><p>SVN 2000，集中式，集大成者（网络环境）</p><p>在CVS的基础上的加强版，可以还原到某个时间点</p></li><li><p>Git 2005，分布式，geek主流（无网环境）</p><p>分布式的版本控制软件</p></li><li><p>GitHub 2008，托管网站，geek社区（程序员托管网站）</p><p>网站托管，基于Git</p></li></ol><p>集中式：服务器。需要联网</p><p>分布式：效率高。拥有版本库即可（Git）</p><h2 id="第3章-如何做个英雄"><a href="#第3章-如何做个英雄" class="headerlink" title="第3章 如何做个英雄"></a>第3章 如何做个英雄</h2><blockquote><p>演示git和github的基本使用，提升工作效率，让我们在独立工作中成为英雄</p></blockquote><h3 id="3-1-Git下载和安装"><a href="#3-1-Git下载和安装" class="headerlink" title="3-1 Git下载和安装"></a>3-1 Git下载和安装</h3><p>安装Git环境一Windows：</p><ul><li>下载Github for Windows：<a href="https://desktop.github.com/" target="_blank" rel="noopener">https://desktop.github.com/</a></li></ul><h3 id="3-2-linux下安装Git环境"><a href="#3-2-linux下安装Git环境" class="headerlink" title="3-2 linux下安装Git环境"></a>3-2 linux下安装Git环境</h3><p>安装Git环境一Linux：</p><pre><code class="shell">yum install gitgit --help</code></pre><h3 id="3-3-github注册"><a href="#3-3-github注册" class="headerlink" title="3-3 github注册"></a>3-3 github注册</h3><p><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h3 id="3-4-创建一个新的项目"><a href="#3-4-创建一个新的项目" class="headerlink" title="3-4 创建一个新的项目"></a>3-4 创建一个新的项目</h3><p><a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a></p><h3 id="3-5-Linux环境下检出项目到本地"><a href="#3-5-Linux环境下检出项目到本地" class="headerlink" title="3-5 Linux环境下检出项目到本地"></a>3-5 Linux环境下检出项目到本地</h3><pre><code class="shell">git clone https://github.com/tuyrk/demo.git</code></pre><h3 id="3-6-Linux环境下第一次提交项目"><a href="#3-6-Linux环境下第一次提交项目" class="headerlink" title="3-6 Linux环境下第一次提交项目"></a>3-6 Linux环境下第一次提交项目</h3><pre><code class="shell">vi log.txtgit add log.txtgit commit -m &quot;comment&quot;git pushgit config</code></pre><p>忽略修改：</p><ol><li>gitignore添加需要忽略的文件</li></ol><h3 id="3-7-windows下检出项目和提交项目"><a href="#3-7-windows下检出项目和提交项目" class="headerlink" title="3-7 windows下检出项目和提交项目"></a>3-7 windows下检出项目和提交项目</h3><h2 id="第4章-和其他英雄一起工作"><a href="#第4章-和其他英雄一起工作" class="headerlink" title="第4章 和其他英雄一起工作"></a>第4章 和其他英雄一起工作</h2><blockquote><p>演示如何通过git和github，让我们和其他英雄一起工作，减少和解决合作中出现的冲突</p></blockquote><h3 id="4-1-关于代码冲突"><a href="#4-1-关于代码冲突" class="headerlink" title="4-1 关于代码冲突"></a>4-1 关于代码冲突</h3><h3 id="4-2-Linux下如何解决冲突"><a href="#4-2-Linux下如何解决冲突" class="headerlink" title="4-2 Linux下如何解决冲突"></a>4-2 Linux下如何解决冲突</h3><p>解决冲突步骤：</p><ol><li>git pull拉取最新代码</li><li>git diff查看</li><li>手动修改提交哪次冲突</li><li>再次提交</li></ol><pre><code class="shell">git pullgit diffgit add log.txtgit commit -m &quot;解决冲突后提交&quot;git push origin master</code></pre><h3 id="4-3-windows下如何解决冲突"><a href="#4-3-windows下如何解决冲突" class="headerlink" title="4-3 windows下如何解决冲突"></a>4-3 windows下如何解决冲突</h3><h3 id="4-4-如何回到过去"><a href="#4-4-如何回到过去" class="headerlink" title="4-4 如何回到过去"></a>4-4 如何回到过去</h3><p>版本回滚操作步骤：</p><pre><code class="shell">git log # 显示所有提交记录.git reset --hard &lt;提交ID&gt; # 完成回滚操作git pushgit log # 显示新的提交记录</code></pre><p>版本跳转操作步骤：</p><pre><code class="shell">git reflog # 查看该用户的所有操作git reset --hard &lt;提交ID&gt; # 完成跳转到现在</code></pre><h3 id="4-5-建立里程碑"><a href="#4-5-建立里程碑" class="headerlink" title="4-5 建立里程碑"></a>4-5 建立里程碑</h3><p>里程碑，即版本号。标签</p><pre><code class="shell">git tag -a &lt;name&gt; -m &quot;comment&quot; # 创建标签git push origin &lt;name&gt;git checkout &lt;name&gt; # 切换标签git checkout -b &lt;分支名称&gt; &lt;name&gt; # 切换标签git tag -d &lt;name&gt; # 删除标签</code></pre><h3 id="4-6-分支开发之分支合并"><a href="#4-6-分支开发之分支合并" class="headerlink" title="4-6 分支开发之分支合并"></a>4-6 分支开发之分支合并</h3><pre><code class="shell">git branch &lt;分支名称&gt; # 创建分支git checkout &lt;分支名称&gt; # 切换分支git merge &lt;分支名称&gt; # 合并到master分支。首先需切换到master分支，然后进行合并git branch -d &lt;分支名称&gt; # 删除分支</code></pre><h3 id="4-7-分支开发之合并到master"><a href="#4-7-分支开发之合并到master" class="headerlink" title="4-7 分支开发之合并到master"></a>4-7 分支开发之合并到master</h3><p>通过Github网页合并分支</p><h3 id="4-8-关于多人合作的一些经验"><a href="#4-8-关于多人合作的一些经验" class="headerlink" title="4-8 关于多人合作的一些经验"></a>4-8 关于多人合作的一些经验</h3><p><strong>利用工具提升工作效率，而不是去学习工具本身</strong></p><ol><li>多用客户端和工具，少用命令行，除非在linux服务器上直接开发</li><li>每次提交前，diff自己的代码，以免提交错误的代码</li><li>下班回家前，整理好自己的工作区</li><li>并行的项目，使用分支开发</li><li>遇到冲突时，搞明白冲突的原因，千万不要随意丢弃别人的代码</li><li>产品发布后，记得打tag，方便将来拉分支修bug</li></ol>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo重新发布后GitPages自定义域名失效</title>
      <link href="/2019/10/29/hexo-gitpages-invalid/"/>
      <url>/2019/10/29/hexo-gitpages-invalid/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用 <code>Github Pages</code> 功能将博客托管在了 Github 上，并配置 <code>CNAME</code> 将自己的域名解析了过去，在 <code>Github</code> 的仓库设置中开始 <code>Custom domain</code> 的功能，这时候就可以直接使用自己的域名访问啦。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8felp76szj311g0u00u4.jpg" alt="GitHub Pages" style="zoom:40%;" /><p>但是发现一个问题是，每次配置 <code>Custom domain</code> 之后，再次 <code>hexo deploy</code> 之后，<code>Custom domain</code> 会被重置失效。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 <code>hexo</code> 生成的博客的 <code>source</code> 目录下新建一个 <code>CNAME</code> 文件，然后在这个文件中填入你的域名，最后重新部署hexo。这样就不会每次发布之后，<code>Github pages</code> 里的 <code>Custom domain</code> 都被重置掉啦。</p><pre><code class="shell">vim ource/CNAME</code></pre><pre><code class="shell">www.tuyrk.cn</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 同时管理Github和Gitee</title>
      <link href="/2019/10/29/git-manage-github-gitee/"/>
      <url>/2019/10/29/git-manage-github-gitee/</url>
      
        <content type="html"><![CDATA[<p>@[TOC]</p><h2 id="1-取消git全局配置"><a href="#1-取消git全局配置" class="headerlink" title="1.取消git全局配置"></a>1.取消git全局配置</h2><blockquote><p>取消全局的user.name和user.email</p></blockquote><pre><code class="shell">git config --global --unset user.name &quot;xxx&quot;git config --global --unset user.email &quot;xxx&quot;</code></pre><p>其中<code>xxx</code>是以前配置的信息，可以通过 下边命令查看</p><pre><code class="shell">git confg --global --list</code></pre><h2 id="2-生成new的ssh-keys"><a href="#2-生成new的ssh-keys" class="headerlink" title="2.生成new的ssh keys"></a>2.生成new的ssh keys</h2><blockquote><p>如果需要github和gitee都能存在，那么就需要生成github和gitee的id_rsa， 然后放在一起</p></blockquote><ol><li><p>生成Github 和 Gitee的keys</p><pre><code class="shell">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &quot;xxx&quot;</code></pre><p>注：其中<code>xxx</code>是github平台的注册邮箱</p><pre><code class="shell">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C &quot;...&quot;</code></pre><p>注：其中<code>...</code>是你gitee平台的注邮箱</p></li><li><p>将生成的新keys添加到ssh agent</p><pre><code class="shell">ssh-agent bash</code></pre><pre><code class="shell">ssh-add ~/.ssh/id_rsa.githubssh-add ~/.ssh/id_rsa.giteeexit</code></pre></li><li><p>配置config文件</p><blockquote><p>在.ssh文件夹下面配置config文件</p></blockquote><pre><code class="shell">vim ~/.ssh/config</code></pre><pre><code class="shell"># githubHost github.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa.githubPort 443# giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa.gitee</code></pre></li></ol><h2 id="3-平台设置SSH"><a href="#3-平台设置SSH" class="headerlink" title="3.平台设置SSH"></a>3.平台设置SSH</h2><blockquote><p>钥匙和配置文件搞定后，就需要将我们的公钥放入到我们的平台中了</p></blockquote><ol><li><p>Github：复制<code>~/.ssh/id_rsa.github.pub</code>的内容到Github公钥</p><p>Settings &gt; SSH and GPG keys &gt; New SSH key</p></li><li><p>Gitee：复制<code>~/.ssh/id_rsa.gitee.pub</code>的内容到Gitee公钥</p><p>设置 &gt; 安全设置 &gt; SSH公钥</p></li></ol><h2 id="4-测试是否成功"><a href="#4-测试是否成功" class="headerlink" title="4.测试是否成功"></a>4.测试是否成功</h2><ol><li><p>Github</p><pre><code class="shell">ssh -T git@github.com</code></pre><p>结果：</p><pre><code>Hi 766564616! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre></li><li><p>Gitee</p><pre><code class="shell">ssh -T git@gitee.com</code></pre><p>结果：</p><pre><code>Hi 神秘的小岛岛! You&#39;ve successfully authenticated, but GITEE.COM does not provide shell access.</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo快捷键说明</title>
      <link href="/2019/10/29/3-hexo-shortcuts/"/>
      <url>/2019/10/29/3-hexo-shortcuts/</url>
      
        <content type="html"><![CDATA[<p>快捷键为vim风格的。按键可能与vimium（chrome插件）的快捷键有冲突，插件设置屏蔽掉此站的快捷键即可</p><p>如果有比较好的建议，欢迎骚扰。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">ESC</td><td align="left">1.如果输入框有内容，清除内容 2.如果输入框无内容，失去焦点</td></tr><tr><td align="left">i/I</td><td align="left">获取焦点</td></tr><tr><td align="left">下</td><td align="left">向下选择文章</td></tr><tr><td align="left">上</td><td align="left">向上选择文章</td></tr><tr><td align="left">回车</td><td align="left">打开当前选中的文章，若没有，则默认打开第一个</td></tr></tbody></table><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">s/S</td><td align="left">全屏/取消全屏</td></tr><tr><td align="left">w/W</td><td align="left">打开/关闭文章目录</td></tr><tr><td align="left">j/J</td><td align="left">向下滑动</td></tr><tr><td align="left">k/K</td><td align="left">向上滑动</td></tr><tr><td align="left">gg/GG</td><td align="left">到最顶端</td></tr><tr><td align="left">shift+G/g</td><td align="left">到最下端</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
