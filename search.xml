<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1052-Git入门</title>
      <link href="/2019/11/01/1052-Git/"/>
      <url>/2019/11/01/1052-Git/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/1052" target="_blank" rel="noopener">https://www.imooc.com/learn/1052</a></p><p>简介：本课程主要通过命令行和图形界面工具来介绍Git的安装、仓库创建、工作流、远程仓库、克隆仓库、标签管理和分支管理等Git的主要内容。</p></blockquote><h2 id="第1章-概述"><a href="#第1章-概述" class="headerlink" title="第1章 概述"></a>第1章 概述</h2><blockquote><p>主要介绍Git的作用以及安装过程。</p></blockquote><h3 id="1-1-为什么学习git"><a href="#1-1-为什么学习git" class="headerlink" title="1-1 为什么学习git"></a>1-1 为什么学习git</h3><blockquote><p>作者：Linus Torvalds，同时也是Linux的作者。</p><p>版本控制：记录所有文件的所有版本，可以有效地追踪文件的变化。同时很容易回到之前的状态</p></blockquote><p>为什么学习Git：</p><ul><li>牛通的互联网、牛逼的大神们都在用</li><li>完整的版本控制功能，解决多人协作的问题</li><li>提高开发效率</li><li>如果你是程序猿,请务必学Git，井习惯把日己的代码同步到GitHub上</li></ul><p>注：Git不等于 GitHub大家注意了! Git和GitHub就是球和球场的关系!</p><p>课程安排：</p><blockquote><p>Git介绍<br>Git安装（命令行、图形化界面）<br>Git工作流<br>本地与远程仓库<br>分支管理<br>标签管理</p></blockquote><h3 id="1-2-Git安装"><a href="#1-2-Git安装" class="headerlink" title="1-2 Git安装"></a>1-2 Git安装</h3><p>命令行：</p><ul><li><p>下载Window Git</p></li><li><p>Msysgit <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p></li><li><p>配置用户信息</p><pre><code class="shell"># git bashgit config --global user.name &quot;tyk&quot;git config --global user.email &quot;tyk@163.com&quot;</code></pre></li><li><p>查看用户名邮箱是否配置成功</p><pre><code class="shell">git config --list</code></pre></li></ul><p>图形化界面：</p><ul><li>下载安装SourceTree <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a></li><li>注册登录</li></ul><h2 id="第2章-Git仓库创建及工作量"><a href="#第2章-Git仓库创建及工作量" class="headerlink" title="第2章 Git仓库创建及工作量"></a>第2章 Git仓库创建及工作量</h2><blockquote><p>主要介绍Git如何创建仓库以及工作流的内容。</p></blockquote><h3 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2-1 创建仓库"></a>2-1 创建仓库</h3><ul><li><p>初始化版本库</p><pre><code class="shell">git init</code></pre></li><li><p>添加文件到版本库</p><pre><code class="shell">git addgit commit</code></pre></li><li><p>查看仓库状态</p><pre><code class="shell">git status</code></pre></li></ul><p>创建Git仓库：</p><pre><code class="shell">mkdir democd demogit init # 初始化版本库ls -a # 查看所有文件（包含隐藏文件）echo &quot;git repo&quot; &gt;&gt; test.txt # 创建文件并追加输入内容git add test.txt # 添加文件到版本库git commit -m &quot;repo first commit&quot; # 提交文件到本地仓库git status # 查看仓库状态git push -f origin master # 将本地仓库内容同步到远程仓库</code></pre><h3 id="2-2-工作流"><a href="#2-2-工作流" class="headerlink" title="2-2 工作流"></a>2-2 工作流</h3><pre><code class="shell">git add &lt;file&gt;   # 将文件从本地工作区上传到暂存区git commit -m &quot;说明操作内容&quot;  # 将暂存区的文件上传到本地仓库git reset HEAD &lt;file&gt; # 将本地仓库的内容返回到暂存区git checkout -- 文件名 # 清除工作区git log # 查询提交记录的commit号git reset --hard &lt;commit_id&gt; # 将本地仓库和暂存区的内容全部回滚到commit号提交时的内容git rm &lt;file&gt; # 清空文件git rm --cached # 清除工作区里暂存区没有的文件git checkout HEAD &lt;file&gt; # 用最终仓库的文件替换掉暂存区和工作区的</code></pre><p>Git工作流：</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8gigfvzdzj30pk0bzta6.jpg" width="600" alt="Git工作流"/><h2 id="第3章-Git主要功能"><a href="#第3章-Git主要功能" class="headerlink" title="第3章 Git主要功能"></a>第3章 Git主要功能</h2><blockquote><p>主要介绍Git远程仓库、克隆仓库、标签管理和分支管理的主要内容。</p></blockquote><h3 id="3-1-远程仓库"><a href="#3-1-远程仓库" class="headerlink" title="3-1 远程仓库"></a>3-1 远程仓库</h3><p>创建SSH Key</p><pre><code class="shell">ssh-keygen -t rsa -C &quot;github_registry_mail@github.com&quot;cd .ssh/cat id_rsa.pub</code></pre><p>GitHub设置：</p><p>​    [GitHub首页]-[个人头像]-[Settings]-[SSH and GPG keys]-[New SSH key]</p><p>查看本地是否与Github关联</p><pre><code class="shell">ssh -T git@github.com</code></pre><p>添加远程仓库</p><pre><code class="shell">git remote add origin git@github.com:tuyrk/demo.gitgit pull origin master --allow-unrelated-historiesgit push -u origin master</code></pre><p>在GitHub创建新仓库：</p><p>​    [GitHub首页]-[加号]-[New repository]-[Create repository]</p><p>将本地仓库提交到远程</p><pre><code class="shell">echo &quot;# demo&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin git@github.com:tuyrk/demo.gitgit push -u origin master</code></pre><p>将远程仓库克隆到本地</p><pre><code class="shell">git remote add origin git@github.com:tuyrk/demo.gitgit push -u origin master</code></pre><h3 id="3-2-克隆仓库"><a href="#3-2-克隆仓库" class="headerlink" title="3-2 克隆仓库"></a>3-2 克隆仓库</h3><pre><code class="shell">git clone git@github.com:tuyrk/demo.git # 路径为GitHub中SSH路径</code></pre><p>流程：</p><ol><li>将远程仓库GitHub中的代码克隆一份到本地</li><li>在本地进行开发</li><li>开发完之后将代码推送到远程仓库</li></ol><h3 id="3-3-标签管理"><a href="#3-3-标签管理" class="headerlink" title="3-3 标签管理"></a>3-3 标签管理</h3><pre><code class="shell">git tag # 查看所有标签git tag &lt;name&gt; # 创建标签git tag -a &lt;name&gt; -m &quot;comment&quot; # 指定提交信息git tag -d &lt;name&gt; # 删除标签git push origin &lt;name&gt; # 标签发布git checkout &lt;name&gt; # 切换标签-快照git checkout -b &lt;分支名称&gt; &lt;tag标签名称&gt; # 切换标签-编辑</code></pre><h3 id="3-4-分支管理"><a href="#3-4-分支管理" class="headerlink" title="3-4 分支管理"></a>3-4 分支管理</h3><pre><code class="shell">git branch # 查看所有分支，“*”代表当前所在分支git branch &lt;分支名称&gt; # 创建分支git checkout &lt;分支名称&gt; # 切换分支git merge &lt;分支名称&gt; # 合并到master分支。首先需切换到master分支，然后进行合并git branch -d &lt;分支名称&gt; # 删除分支</code></pre><h2 id="第4章-课程总结"><a href="#第4章-课程总结" class="headerlink" title="第4章 课程总结"></a>第4章 课程总结</h2><blockquote><p>课程总结</p></blockquote><h3 id="4-1-课程总结"><a href="#4-1-课程总结" class="headerlink" title="4-1 课程总结"></a>4-1 课程总结</h3><ul><li><p>介绍与安装</p></li><li><p>工作流</p><p>[工作区]=&gt;[暂存区]=&gt;[版本库]</p></li><li><p>初始化</p><pre><code class="shell">git initgit addgit commit]</code></pre></li><li><p>远程仓库</p><pre><code class="shell">git remote addgit pullgit pushgit clone</code></pre></li><li><p>分支管理</p><pre><code class="shell">git branchgit checkoutgit merge</code></pre></li><li><p>标签管理</p><pre><code class="shell">git taggit push</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>390-版本控制入门 – 搬进 Github</title>
      <link href="/2019/11/01/390-Github/"/>
      <url>/2019/11/01/390-Github/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/390" target="_blank" rel="noopener">https://www.imooc.com/learn/390</a></p><p>简介：版本控制能够大大提高程序员的工作效率，但是通常会涉及到命令行操作，学习曲线陡峭。本课程中使用 Github 网站和图形化客户端来完成版本控制工作，提供一套简单实用的流程，配合图解方式的原理讲解，让大家以最短的时间上手 Git 和 Github 。</p></blockquote><p><a href="https://gitbeijing.com/" target="_blank" rel="noopener">https://gitbeijing.com/</a></p><h2 id="第1章-Github课程介绍"><a href="#第1章-Github课程介绍" class="headerlink" title="第1章 Github课程介绍"></a>第1章 Github课程介绍</h2><blockquote><p>阐述本课程的覆盖内容，适合观众。</p></blockquote><h3 id="1-1-课程介绍"><a href="#1-1-课程介绍" class="headerlink" title="1-1 课程介绍"></a>1-1 课程介绍</h3><p>Git和Linux之父，Linus</p><blockquote><p>我是个自负的混蛋，所有我的项目都以我自己的名字命名，先有Linux，现在是Git.<br>–Linus</p></blockquote><p>Global Information Tracker：全局信息跟踪器</p><p>Git：版本控制工具</p><p><a href="https://github.com" target="_blank" rel="noopener">https://github.com</a></p><h2 id="第2章-浏览器中使用-Github"><a href="#第2章-浏览器中使用-Github" class="headerlink" title="第2章 浏览器中使用 Github"></a>第2章 浏览器中使用 Github</h2><blockquote><p>不会用 Git，其实也可以直接使用 Github 来进行基本的版本控制操作的。</p></blockquote><h3 id="2-1-浏览器中使用Github"><a href="#2-1-浏览器中使用Github" class="headerlink" title="2-1 浏览器中使用Github"></a>2-1 浏览器中使用Github</h3><h2 id="第3章-Github-客户端的使用"><a href="#第3章-Github-客户端的使用" class="headerlink" title="第3章 Github 客户端的使用"></a>第3章 Github 客户端的使用</h2><blockquote><p>以 Mac 系统的客户端 Github For Mac 为例子来讲解，不过 Windows 系统上也有类似的客户端。</p></blockquote><h3 id="3-1-Github客户端的使用"><a href="#3-1-Github客户端的使用" class="headerlink" title="3-1 Github客户端的使用"></a>3-1 Github客户端的使用</h3><h2 id="第4章-简单分支操作"><a href="#第4章-简单分支操作" class="headerlink" title="第4章 简单分支操作"></a>第4章 简单分支操作</h2><blockquote><p>分支操作几乎是所有的 Git 高级操作的基础，本章来学会使用分支。</p></blockquote><h3 id="4-1-Github-简单分支操作"><a href="#4-1-Github-简单分支操作" class="headerlink" title="4-1 Github-简单分支操作"></a>4-1 Github-简单分支操作</h3><h2 id="第5章-分支合并"><a href="#第5章-分支合并" class="headerlink" title="第5章 分支合并"></a>第5章 分支合并</h2><blockquote><p>分支合并过程其实就是代码融合过程，会涉及到处理代码冲突的问题。</p></blockquote><h3 id="5-1-Github-合并分支（上）"><a href="#5-1-Github-合并分支（上）" class="headerlink" title="5-1 Github-合并分支（上）"></a>5-1 Github-合并分支（上）</h3><h3 id="5-2-Github-合并分支（下）"><a href="#5-2-Github-合并分支（下）" class="headerlink" title="5-2 Github-合并分支（下）"></a>5-2 Github-合并分支（下）</h3><h2 id="第6章-团队协作流程"><a href="#第6章-团队协作流程" class="headerlink" title="第6章 团队协作流程"></a>第6章 团队协作流程</h2><blockquote><p>Github 公司内部使用的工作流程 Github Flow，是 Git 多种协作流程中，最简单也是最流行的一套思路。本章来看看在团队内部如何应用这套流程。</p></blockquote><h3 id="6-1-Github-团队协作流程（上）"><a href="#6-1-Github-团队协作流程（上）" class="headerlink" title="6-1 Github-团队协作流程（上）"></a>6-1 Github-团队协作流程（上）</h3><h3 id="6-2-Github-团队协作流程（下）"><a href="#6-2-Github-团队协作流程（下）" class="headerlink" title="6-2 Github-团队协作流程（下）"></a>6-2 Github-团队协作流程（下）</h3><h2 id="第7章-开源项目贡献流程"><a href="#第7章-开源项目贡献流程" class="headerlink" title="第7章 开源项目贡献流程"></a>第7章 开源项目贡献流程</h2><blockquote><p>开源项目由于贡献者互相不认识，所以流程上必然是区别于团队流程的，但是本质上依然是基于 Pull Request 的 Github Flow。</p></blockquote><h3 id="7-1-开源项目贡献流程"><a href="#7-1-开源项目贡献流程" class="headerlink" title="7-1 开源项目贡献流程"></a>7-1 开源项目贡献流程</h3><h2 id="第8章-Github-Issues"><a href="#第8章-Github-Issues" class="headerlink" title="第8章 Github Issues"></a>第8章 Github Issues</h2><blockquote><p>Issues 相当于项目论坛，集中讨论项目新功能，bug 修复以及任何项目相关的事情。会涉及到 Markdown 使用和多种技巧。</p></blockquote><h3 id="8-1-Github-Issues"><a href="#8-1-Github-Issues" class="headerlink" title="8-1 Github Issues"></a>8-1 Github Issues</h3><h2 id="第9章-Github-Pages-搭建网站"><a href="#第9章-Github-Pages-搭建网站" class="headerlink" title="第9章 Github Pages 搭建网站"></a>第9章 Github Pages 搭建网站</h2><blockquote><p>Github 提供了自己搭建项目网站的一套框架，非常的简单实用。</p></blockquote><h3 id="9-1-Github-Pages-搭建网站"><a href="#9-1-Github-Pages-搭建网站" class="headerlink" title="9-1 Github Pages 搭建网站"></a>9-1 Github Pages 搭建网站</h3><p><a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a></p><h2 id="第10章-Github-的秘密机关"><a href="#第10章-Github-的秘密机关" class="headerlink" title="第10章 Github 的秘密机关"></a>第10章 Github 的秘密机关</h2><blockquote><p>为了保证界面的简约美观，Github 的很多功能其实是隐藏的，例如一些非常能够提高工作效率的快捷键。</p></blockquote><h3 id="10-1-Github的秘密机关"><a href="#10-1-Github的秘密机关" class="headerlink" title="10-1 Github的秘密机关"></a>10-1 Github的秘密机关</h3><p>GitHub官网中搜索文件快捷键：T</p><p>GitHub社交化编程</p><p>怎么筛选学习内容？：可以追星</p><h2 id="第11章-Until-Next-Time-Goodbye"><a href="#第11章-Until-Next-Time-Goodbye" class="headerlink" title="第11章 Until Next Time, Goodbye!"></a>第11章 Until Next Time, Goodbye!</h2><blockquote><p>总结和下一步的学习建议。</p></blockquote><h3 id="11-1-Until-Next-Time-Goodbye-01-10"><a href="#11-1-Until-Next-Time-Goodbye-01-10" class="headerlink" title="11-1 Until Next Time, Goodbye! (01:10)"></a>11-1 Until Next Time, Goodbye! (01:10)</h3>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>208-版本管理工具介绍—Git篇</title>
      <link href="/2019/11/01/208-Git/"/>
      <url>/2019/11/01/208-Git/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.imooc.com/learn/208" target="_blank" rel="noopener">https://www.imooc.com/learn/208</a></p><p>简介：本课程主要讲解了git在各平台的安装和基本使用，Git能够帮助我们解决文件的提交、检出、回溯历史、冲突解决、多人协作模式等问题，并且大大提升我们的工作效率。</p></blockquote><h2 id="第1章-版本管理工具初探"><a href="#第1章-版本管理工具初探" class="headerlink" title="第1章 版本管理工具初探"></a>第1章 版本管理工具初探</h2><blockquote><p>聊聊版本管理工具是什么，它能为我们做什么。</p></blockquote><h3 id="1-1-版本管理工具简介"><a href="#1-1-版本管理工具简介" class="headerlink" title="1-1 版本管理工具简介"></a>1-1 版本管理工具简介</h3><p>版本管理工具是干什么用的？</p><ul><li>备份文件（类似U盘，网盘）</li><li>记录历史（有各个阶段的代码历史版本）</li><li>回到过去（恢复历史版本）</li><li>多端协作（可以在家工作，也可以在公司）</li><li>团队协作（代码整合，多人共同完成一个项目）</li></ul><h2 id="第2章-工具的历史"><a href="#第2章-工具的历史" class="headerlink" title="第2章 工具的历史"></a>第2章 工具的历史</h2><blockquote><p>聊聊cvs、svn、git、github这些工具的发展历史。</p></blockquote><h3 id="2-1-版本管理工具发展历史"><a href="#2-1-版本管理工具发展历史" class="headerlink" title="2-1 版本管理工具发展历史"></a>2-1 版本管理工具发展历史</h3><ol><li><p>CVS 1985，集中式，始祖（网络环境）</p><p>最早期的版本控制软件，是把文件集中保存到中心服务器</p></li><li><p>SVN 2000，集中式，集大成者（网络环境）</p><p>在CVS的基础上的加强版，可以还原到某个时间点</p></li><li><p>Git 2005，分布式，geek主流（无网环境）</p><p>分布式的版本控制软件</p></li><li><p>GitHub 2008，托管网站，geek社区（程序员托管网站）</p><p>网站托管，基于Git</p></li></ol><p>集中式：服务器。需要联网</p><p>分布式：效率高。拥有版本库即可（Git）</p><h2 id="第3章-如何做个英雄"><a href="#第3章-如何做个英雄" class="headerlink" title="第3章 如何做个英雄"></a>第3章 如何做个英雄</h2><blockquote><p>演示git和github的基本使用，提升工作效率，让我们在独立工作中成为英雄</p></blockquote><h3 id="3-1-Git下载和安装"><a href="#3-1-Git下载和安装" class="headerlink" title="3-1 Git下载和安装"></a>3-1 Git下载和安装</h3><p>安装Git环境一Windows：</p><ul><li>下载Github for Windows：<a href="https://desktop.github.com/" target="_blank" rel="noopener">https://desktop.github.com/</a></li></ul><h3 id="3-2-linux下安装Git环境"><a href="#3-2-linux下安装Git环境" class="headerlink" title="3-2 linux下安装Git环境"></a>3-2 linux下安装Git环境</h3><p>安装Git环境一Linux：</p><pre><code class="shell">yum install gitgit --help</code></pre><h3 id="3-3-github注册"><a href="#3-3-github注册" class="headerlink" title="3-3 github注册"></a>3-3 github注册</h3><p><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p><h3 id="3-4-创建一个新的项目"><a href="#3-4-创建一个新的项目" class="headerlink" title="3-4 创建一个新的项目"></a>3-4 创建一个新的项目</h3><p><a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a></p><h3 id="3-5-Linux环境下检出项目到本地"><a href="#3-5-Linux环境下检出项目到本地" class="headerlink" title="3-5 Linux环境下检出项目到本地"></a>3-5 Linux环境下检出项目到本地</h3><pre><code class="shell">git clone https://github.com/tuyrk/demo.git</code></pre><h3 id="3-6-Linux环境下第一次提交项目"><a href="#3-6-Linux环境下第一次提交项目" class="headerlink" title="3-6 Linux环境下第一次提交项目"></a>3-6 Linux环境下第一次提交项目</h3><pre><code class="shell">vi log.txtgit add log.txtgit commit -m &quot;comment&quot;git pushgit config</code></pre><p>忽略修改：</p><ol><li>gitignore添加需要忽略的文件</li></ol><h3 id="3-7-windows下检出项目和提交项目"><a href="#3-7-windows下检出项目和提交项目" class="headerlink" title="3-7 windows下检出项目和提交项目"></a>3-7 windows下检出项目和提交项目</h3><h2 id="第4章-和其他英雄一起工作"><a href="#第4章-和其他英雄一起工作" class="headerlink" title="第4章 和其他英雄一起工作"></a>第4章 和其他英雄一起工作</h2><blockquote><p>演示如何通过git和github，让我们和其他英雄一起工作，减少和解决合作中出现的冲突</p></blockquote><h3 id="4-1-关于代码冲突"><a href="#4-1-关于代码冲突" class="headerlink" title="4-1 关于代码冲突"></a>4-1 关于代码冲突</h3><h3 id="4-2-Linux下如何解决冲突"><a href="#4-2-Linux下如何解决冲突" class="headerlink" title="4-2 Linux下如何解决冲突"></a>4-2 Linux下如何解决冲突</h3><p>解决冲突步骤：</p><ol><li>git pull拉取最新代码</li><li>git diff查看</li><li>手动修改提交哪次冲突</li><li>再次提交</li></ol><pre><code class="shell">git pullgit diffgit add log.txtgit commit -m &quot;解决冲突后提交&quot;git push origin master</code></pre><h3 id="4-3-windows下如何解决冲突"><a href="#4-3-windows下如何解决冲突" class="headerlink" title="4-3 windows下如何解决冲突"></a>4-3 windows下如何解决冲突</h3><h3 id="4-4-如何回到过去"><a href="#4-4-如何回到过去" class="headerlink" title="4-4 如何回到过去"></a>4-4 如何回到过去</h3><p>版本回滚操作步骤：</p><pre><code class="shell">git log # 显示所有提交记录.git reset --hard &lt;提交ID&gt; # 完成回滚操作git pushgit log # 显示新的提交记录</code></pre><p>版本跳转操作步骤：</p><pre><code class="shell">git reflog # 查看该用户的所有操作git reset --hard &lt;提交ID&gt; # 完成跳转到现在</code></pre><h3 id="4-5-建立里程碑"><a href="#4-5-建立里程碑" class="headerlink" title="4-5 建立里程碑"></a>4-5 建立里程碑</h3><p>里程碑，即版本号。标签</p><pre><code class="shell">git tag -a &lt;name&gt; -m &quot;comment&quot; # 创建标签git push origin &lt;name&gt;git checkout &lt;name&gt; # 切换标签git checkout -b &lt;分支名称&gt; &lt;name&gt; # 切换标签git tag -d &lt;name&gt; # 删除标签</code></pre><h3 id="4-6-分支开发之分支合并"><a href="#4-6-分支开发之分支合并" class="headerlink" title="4-6 分支开发之分支合并"></a>4-6 分支开发之分支合并</h3><pre><code class="shell">git branch &lt;分支名称&gt; # 创建分支git checkout &lt;分支名称&gt; # 切换分支git merge &lt;分支名称&gt; # 合并到master分支。首先需切换到master分支，然后进行合并git branch -d &lt;分支名称&gt; # 删除分支</code></pre><h3 id="4-7-分支开发之合并到master"><a href="#4-7-分支开发之合并到master" class="headerlink" title="4-7 分支开发之合并到master"></a>4-7 分支开发之合并到master</h3><p>通过Github网页合并分支</p><h3 id="4-8-关于多人合作的一些经验"><a href="#4-8-关于多人合作的一些经验" class="headerlink" title="4-8 关于多人合作的一些经验"></a>4-8 关于多人合作的一些经验</h3><p><strong>利用工具提升工作效率，而不是去学习工具本身</strong></p><ol><li>多用客户端和工具，少用命令行，除非在linux服务器上直接开发</li><li>每次提交前，diff自己的代码，以免提交错误的代码</li><li>下班回家前，整理好自己的工作区</li><li>并行的项目，使用分支开发</li><li>遇到冲突时，搞明白冲突的原因，千万不要随意丢弃别人的代码</li><li>产品发布后，记得打tag，方便将来拉分支修bug</li></ol>]]></content>
      
      
      <categories>
          
          <category> 慕课网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo重新发布后GitPages自定义域名失效</title>
      <link href="/2019/10/29/hexo-gitpages-invalid/"/>
      <url>/2019/10/29/hexo-gitpages-invalid/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用 <code>Github Pages</code> 功能将博客托管在了 Github 上，并配置 <code>CNAME</code> 将自己的域名解析了过去，在 <code>Github</code> 的仓库设置中开始 <code>Custom domain</code> 的功能，这时候就可以直接使用自己的域名访问啦。</p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g8felp76szj311g0u00u4.jpg" alt="GitHub Pages" style="zoom:40%;" /><p>但是发现一个问题是，每次配置 <code>Custom domain</code> 之后，再次 <code>hexo deploy</code> 之后，<code>Custom domain</code> 会被重置失效。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 <code>hexo</code> 生成的博客的 <code>source</code> 目录下新建一个 <code>CNAME</code> 文件，然后在这个文件中填入你的域名，最后重新部署hexo。这样就不会每次发布之后，<code>Github pages</code> 里的 <code>Custom domain</code> 都被重置掉啦。</p><pre><code class="shell">vim ource/CNAME</code></pre><pre><code class="shell">www.tuyrk.cn</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 同时管理Github和Gitee</title>
      <link href="/2019/10/29/git-manage-github-gitee/"/>
      <url>/2019/10/29/git-manage-github-gitee/</url>
      
        <content type="html"><![CDATA[<h2 id="1-取消git全局配置"><a href="#1-取消git全局配置" class="headerlink" title="1.取消git全局配置"></a>1.取消git全局配置</h2><blockquote><p>取消全局的user.name和user.email</p></blockquote><pre><code class="shell">git config --global --unset user.name &quot;xxx&quot;git config --global --unset user.email &quot;xxx&quot;</code></pre><p>其中<code>xxx</code>是以前配置的信息，可以通过 下边命令查看</p><pre><code class="shell">git confg --global --list</code></pre><h2 id="2-生成new的ssh-keys"><a href="#2-生成new的ssh-keys" class="headerlink" title="2.生成new的ssh keys"></a>2.生成new的ssh keys</h2><blockquote><p>如果需要github和gitee都能存在，那么就需要生成github和gitee的id_rsa， 然后放在一起</p></blockquote><ol><li><p>生成Github 和 Gitee的keys</p><pre><code class="shell">ssh-keygen -t rsa -f ~/.ssh/id_rsa.github -C &quot;xxx&quot;</code></pre><p>注：其中<code>xxx</code>是github平台的注册邮箱</p><pre><code class="shell">ssh-keygen -t rsa -f ~/.ssh/id_rsa.gitee -C &quot;...&quot;</code></pre><p>注：其中<code>...</code>是你gitee平台的注邮箱</p></li><li><p>将生成的新keys添加到ssh agent</p><pre><code class="shell">ssh-agent bash</code></pre><pre><code class="shell">ssh-add ~/.ssh/id_rsa.githubssh-add ~/.ssh/id_rsa.giteeexit</code></pre></li><li><p>配置config文件</p><blockquote><p>在.ssh文件夹下面配置config文件</p></blockquote><pre><code class="shell">vim ~/.ssh/config</code></pre><pre><code class="shell"># githubHost github.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa.githubPort 443# giteeHost gitee.comHostName gitee.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa.gitee</code></pre></li></ol><h2 id="3-平台设置SSH"><a href="#3-平台设置SSH" class="headerlink" title="3.平台设置SSH"></a>3.平台设置SSH</h2><blockquote><p>钥匙和配置文件搞定后，就需要将我们的公钥放入到我们的平台中了</p></blockquote><ol><li><p>Github：复制<code>~/.ssh/id_rsa.github.pub</code>的内容到Github公钥</p><p>Settings &gt; SSH and GPG keys &gt; New SSH key</p></li><li><p>Gitee：复制<code>~/.ssh/id_rsa.gitee.pub</code>的内容到Gitee公钥</p><p>设置 &gt; 安全设置 &gt; SSH公钥</p></li></ol><h2 id="4-测试是否成功"><a href="#4-测试是否成功" class="headerlink" title="4.测试是否成功"></a>4.测试是否成功</h2><ol><li><p>Github</p><pre><code class="shell">ssh -T git@github.com</code></pre><p>结果：</p><pre><code>Hi 766564616! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre></li><li><p>Gitee</p><pre><code class="shell">ssh -T git@gitee.com</code></pre><p>结果：</p><pre><code>Hi 神秘的小岛岛! You&#39;ve successfully authenticated, but GITEE.COM does not provide shell access.</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo快捷键说明</title>
      <link href="/2019/10/29/3-hexo-shortcuts/"/>
      <url>/2019/10/29/3-hexo-shortcuts/</url>
      
        <content type="html"><![CDATA[<p>快捷键为vim风格的。按键可能与vimium（chrome插件）的快捷键有冲突，插件设置屏蔽掉此站的快捷键即可</p><p>如果有比较好的建议，欢迎骚扰。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">ESC</td><td align="left">1.如果输入框有内容，清除内容 2.如果输入框无内容，失去焦点</td></tr><tr><td align="left">i/I</td><td align="left">获取焦点</td></tr><tr><td align="left">下</td><td align="left">向下选择文章</td></tr><tr><td align="left">上</td><td align="left">向上选择文章</td></tr><tr><td align="left">回车</td><td align="left">打开当前选中的文章，若没有，则默认打开第一个</td></tr></tbody></table><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">s/S</td><td align="left">全屏/取消全屏</td></tr><tr><td align="left">w/W</td><td align="left">打开/关闭文章目录</td></tr><tr><td align="left">j/J</td><td align="left">向下滑动</td></tr><tr><td align="left">k/K</td><td align="left">向上滑动</td></tr><tr><td align="left">gg/GG</td><td align="left">到最顶端</td></tr><tr><td align="left">shift+G/g</td><td align="left">到最下端</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
